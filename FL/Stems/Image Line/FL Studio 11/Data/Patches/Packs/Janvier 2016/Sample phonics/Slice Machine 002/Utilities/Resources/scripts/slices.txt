{******************************************************************************

   Created by James Milton for Samplephonics 2013

   Huge thanks to Evil Dragon for all the help he was kind enough to give us 
   whilst making this script.

******************************************************************************}

on init
  message("")
  make_perfview
  set_ui_height_px(490)
  declare const $maxSlices := 16
  declare $t
  $t := pgs_get_key_val(SAMPLE_TEMPO,0)
  declare @main
  @main := pgs_get_str_key_val(SAMPLE_NAME)
  declare $originalTempo
  $originalTempo := 60000000/$t/4/4  
  declare $currentTempo
  $currentTempo := 0
  declare $qSize
  declare $adjustWait
  declare $newSlice
  declare const $maxBPM := 50000
  $adjustWait := $maxBPM-(($currentTempo-20)*215)
  declare $count
  declare $y
  declare $y2
  declare $start
  declare $distance
  declare %quantiseArray[380]
  load_array(%quantiseArray,1)
  declare %quantiseArrayTriplet[380]
  load_array(%quantiseArrayTriplet,1)
  declare $currentQuantise
  $currentQuantise := %quantiseArray[$t-20]
  declare $currentQuantiseTriplet
  $currentQuantiseTriplet := %quantiseArrayTriplet[$t-20]
  declare $stutterOn
  declare $jumpPos
  declare $checkSlice
  declare ui_button $highlight
  declare $highlight_id
  declare const $wave_length := 608
  declare const $wave_start := 13
  declare $newCount
  $highlight_id := get_ui_id($highlight)
  set_control_par_str($highlight_id,$CONTROL_PAR_PICTURE,"highlight")
  set_control_par_str($highlight_id,$CONTROL_PAR_TEXT,"")
  set_control_par($highlight_id,$CONTROL_PAR_POS_Y,21)
  set_control_par($highlight_id,$CONTROL_PAR_POS_X,$wave_start)
  set_control_par($highlight_id,$CONTROL_PAR_WIDTH,$wave_length)
  set_control_par($highlight_id,$CONTROL_PAR_HEIGHT,90)
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  declare ui_label $gridHighlight(0, 0) 
  declare $gridHighlight_id
  $gridHighlight_id := get_ui_id($gridHighlight)
  set_control_par_str($gridHighlight_id,$CONTROL_PAR_PICTURE,"gridHighlight")
  set_control_par_str($gridHighlight_id,$CONTROL_PAR_TEXT,"")
  set_control_par($gridHighlight_id,$CONTROL_PAR_POS_Y,261)
  set_control_par($gridHighlight_id,$CONTROL_PAR_POS_X,360)
  set_control_par($gridHighlight_id,$CONTROL_PAR_WIDTH,211)
  set_control_par($gridHighlight_id,$CONTROL_PAR_HEIGHT,27)
  set_control_par($gridHighlight_id,$CONTROL_PAR_PICTURE_STATE,0)
  declare ui_label $sliceBackground(0, 0) 
  declare $sliceBackground_id
  $sliceBackground_id := get_ui_id($sliceBackground)
  set_control_par_str($sliceBackground_id,$CONTROL_PAR_PICTURE,"sliceBackground")
  set_control_par_str($sliceBackground_id,$CONTROL_PAR_TEXT,"")
  set_control_par($sliceBackground_id,$CONTROL_PAR_POS_Y,253)
  set_control_par($sliceBackground_id,$CONTROL_PAR_POS_X,320)
  set_control_par($sliceBackground_id,$CONTROL_PAR_WIDTH,40)
  set_control_par($sliceBackground_id,$CONTROL_PAR_HEIGHT,205)
  set_control_par($sliceBackground_id,$CONTROL_PAR_PICTURE_STATE,0)
  declare ui_label $reverbBox(0, 0) 
  declare $reverbBox_id
  $reverbBox_id := get_ui_id($reverbBox)
  set_control_par_str($reverbBox_id,$CONTROL_PAR_PICTURE,"reverbBox")
  set_control_par_str($reverbBox_id,$CONTROL_PAR_TEXT,"")
  set_control_par($reverbBox_id,$CONTROL_PAR_POS_Y,306)
  set_control_par($reverbBox_id,$CONTROL_PAR_POS_X,45)
  set_control_par($reverbBox_id,$CONTROL_PAR_WIDTH,50)
  set_control_par($reverbBox_id,$CONTROL_PAR_HEIGHT,50)
  hide_part($reverbBox,$HIDE_WHOLE_CONTROL)
  declare ui_button $matrix1
  declare ui_button $matrix2
  declare ui_button $matrix3
  declare ui_button $matrix4
  declare ui_button $matrix5
  declare ui_button $matrix6
  declare ui_button $matrix7
  declare ui_button $matrix8
  declare %matrixButton_id[8]
  %matrixButton_id[0] := get_ui_id($matrix1)
  %matrixButton_id[1] := get_ui_id($matrix2)
  %matrixButton_id[2] := get_ui_id($matrix3)
  %matrixButton_id[3] := get_ui_id($matrix4)
  %matrixButton_id[4] := get_ui_id($matrix5)
  %matrixButton_id[5] := get_ui_id($matrix6)
  %matrixButton_id[6] := get_ui_id($matrix7)
  %matrixButton_id[7] := get_ui_id($matrix8)
  $count := 0
  $start := 323
  $y := 268
  $distance := 22
  while ($count<8)
    set_control_par(%matrixButton_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$distance))
    set_control_par(%matrixButton_id[$count],$CONTROL_PAR_POS_X,323)
    set_control_par(%matrixButton_id[$count],$CONTROL_PAR_WIDTH,40)
    set_control_par(%matrixButton_id[$count],$CONTROL_PAR_HEIGHT,20)
    set_control_par_str(%matrixButton_id[$count],$CONTROL_PAR_PICTURE,"matrixButton")
    set_control_par_str(%matrixButton_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%matrixButton_id[$count],$CONTROL_PAR_HELP,"Click to select this slice")
    inc($count)
  end while
  declare ui_button $fx1
  declare ui_button $fx2
  declare ui_button $fx3
  declare ui_button $fx4
  declare ui_button $fx5
  declare ui_button $fx6
  declare ui_button $fx7
  declare ui_button $fx8
  declare ui_button $fx9
  declare %fxButton_id[9]
  %fxButton_id[0] := get_ui_id($fx1)
  %fxButton_id[1] := get_ui_id($fx2)
  %fxButton_id[2] := get_ui_id($fx3)
  %fxButton_id[3] := get_ui_id($fx4)
  %fxButton_id[4] := get_ui_id($fx5)
  %fxButton_id[5] := get_ui_id($fx6)
  %fxButton_id[6] := get_ui_id($fx7)
  %fxButton_id[7] := get_ui_id($fx8)
  %fxButton_id[8] := get_ui_id($fx9)
  $count := 0
  $y := 223
  $distance := 23
  while ($count<9)
    set_control_par(%fxButton_id[$count],$CONTROL_PAR_POS_Y,$y)
    set_control_par(%fxButton_id[$count],$CONTROL_PAR_POS_X,365+($count*$distance))
    set_control_par(%fxButton_id[$count],$CONTROL_PAR_WIDTH,20)
    set_control_par(%fxButton_id[$count],$CONTROL_PAR_HEIGHT,40)
    set_control_par_str(%fxButton_id[$count],$CONTROL_PAR_PICTURE,"fxButton")
    set_control_par_str(%fxButton_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%fxButton_id[$count],$CONTROL_PAR_HELP,"Click to select this effect for the current slice")
    inc($count)
  end while
  declare ui_button $resetSlice
  move_control_px($resetSlice,437,453)
  declare ui_button $resetAll
  move_control_px($resetAll,532,453)
  declare ui_switch $bypassAll
  move_control_px($bypassAll,334,453)
  set_control_par_str(get_ui_id($resetSlice),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($resetSlice),$CONTROL_PAR_HELP,"Resets all the effects for the current slice")
  set_control_par_str(get_ui_id($resetSlice),$CONTROL_PAR_PICTURE,"quan1")
  set_control_par(get_ui_id($resetSlice),$CONTROL_PAR_HEIGHT,50)
  set_control_par_str(get_ui_id($resetAll),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($resetAll),$CONTROL_PAR_HELP,"Resets all the effects for all slices")
  set_control_par_str(get_ui_id($resetAll),$CONTROL_PAR_PICTURE,"quan1")
  set_control_par(get_ui_id($resetAll),$CONTROL_PAR_HEIGHT,50)
  set_control_par_str(get_ui_id($bypassAll),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($bypassAll),$CONTROL_PAR_HELP,"Bypass all the effects for all slices")
  set_control_par_str(get_ui_id($bypassAll),$CONTROL_PAR_PICTURE,"bypassPic")
  set_control_par(get_ui_id($bypassAll),$CONTROL_PAR_HEIGHT,50)
  make_persistent($bypassAll)
  read_persistent_var($bypassAll)
  declare $countJump
  declare $countPan
  declare $panAttack
  declare $pitchMod
  declare $panMod
  $panMod := 0
  declare $currentAux
  declare $previousAux
  declare $auxMod
  declare $auxSlice
  declare $gridAux
  declare $previousGrid
  declare $currentGlitch
  declare $gridSlice
  $gridAux := 0
  $previousGrid := 0
  $currentGlitch := 0
  $gridSlice := -1
  declare $index2
  declare $index3
  declare $index4
  $currentAux := -1
  $previousAux := -1
  $auxSlice := -1
  declare $tabAslice
  declare $tabBslice
  declare $tabAfx
  declare $tabBfx
  $tabAslice := 0
  $tabBslice := 8
  $tabAfx := 0
  $tabBfx := 0
  declare $jumpOn
  declare const $addDistance := 20
  declare $blueMod
  declare ui_button $quantiseSlice
  set_control_par_str(get_ui_id($quantiseSlice),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($quantiseSlice),$CONTROL_PAR_HELP,"Quantise the current slice")
  set_control_par_str(get_ui_id($quantiseSlice),$CONTROL_PAR_PICTURE,"quan1")
  set_control_par(get_ui_id($quantiseSlice),$CONTROL_PAR_HEIGHT,15)
  set_control_par(get_ui_id($quantiseSlice),$CONTROL_PAR_WIDTH,15)
  declare $quantiseSelect
  $quantiseSelect := 0
  make_persistent($quantiseSelect)
  read_persistent_var($quantiseSelect)
  declare $main_zone
  $main_zone := find_zone(@main)
  declare $sample_length
  $sample_length := get_sample_length($main_zone)
  declare $picLength
  $picLength := $sample_length/8
  declare $pixelLength
  $pixelLength := $sample_length/$wave_length
  $jumpPos := $sample_length/$currentQuantise
  declare const $FONT_ID := 1
  declare const $FONT_ID_2 := 10
  declare $reverb_slot := 1
  declare const $ROOT_X := 66
  declare const $ROOT_Y := 2
  declare const $GRID_X := 92
  declare const $GRID_Y := 21
  declare ui_menu $category_reverb
  declare ui_menu $hall_reverb
  declare ui_menu $cathedral_reverb
  declare ui_menu $club_reverb
  declare ui_menu $room_reverb
  declare ui_menu $l300_reverb
  declare ui_menu $quadstick_reverb
  declare ui_menu $brt7_reverb
  declare ui_menu $plate_reverb
  declare ui_menu $cabinet_reverb
  declare %subcat_menu_id[9]
  %subcat_menu_id[0] := get_ui_id($hall_reverb)
  %subcat_menu_id[1] := get_ui_id($cathedral_reverb)
  %subcat_menu_id[2] := get_ui_id($club_reverb)
  %subcat_menu_id[3] := get_ui_id($room_reverb)
  %subcat_menu_id[4] := get_ui_id($l300_reverb)
  %subcat_menu_id[6] := get_ui_id($quadstick_reverb)
  %subcat_menu_id[7] := get_ui_id($brt7_reverb)
  %subcat_menu_id[5] := get_ui_id($plate_reverb)
  %subcat_menu_id[8] := get_ui_id($cabinet_reverb)
  declare %offset_reverb[9] := (0, 3, 6, 14, 21, 52, 34, 42, 62)
  add_menu_item($category_reverb,"Group 1",0)
  add_menu_item($category_reverb,"Group 2",1)
  add_menu_item($category_reverb,"Group 3",2)
  add_menu_item($category_reverb,"Group 4",3)
  add_menu_item($category_reverb,"Group 5",4)
  add_menu_item($category_reverb,"Group 6",6)
  add_menu_item($category_reverb,"Group 7",7)
  add_menu_item($category_reverb,"Group 8",5)
  add_menu_item($category_reverb,"Group 9",8)
  declare !ir_path[68]
  !ir_path[0] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Concert Hall A.wav"
  !ir_path[1] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Concert Hall B.wav"
  !ir_path[2] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Exhibition Hall.wav"
  !ir_path[3] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Cathedral A.wav"
  !ir_path[4] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Cathedral B.wav"
  !ir_path[5] := "presets/effects/convolution/10 Big Rooms/IR Samples/ndb_cathedral_ir_32bit.wav"
  !ir_path[6] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Club A.wav"
  !ir_path[7] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Club B.wav"
  !ir_path[8] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Tavern Close.wav"
  !ir_path[9] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Tavern Near.wav"
  !ir_path[10] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Tavern Medium.wav"
  !ir_path[11] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Tavern Far.wav"
  !ir_path[12] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Auditorium A.wav"
  !ir_path[13] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Auditorium B.wav"
  !ir_path[14] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Chamber A.wav"
  !ir_path[15] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Chamber B.wav"
  !ir_path[16] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Rehearsal Room.wav"
  !ir_path[17] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Hard Wood Room B.wav"
  !ir_path[18] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Music Studio C.wav"
  !ir_path[19] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Small Room A.wav"
  !ir_path[20] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Small Room B.wav"
  !ir_path[21] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Large Hall.wav"
  !ir_path[22] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Gated Hall.wav"
  !ir_path[23] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Large Room.wav"
  !ir_path[24] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Large Chamber.wav"
  !ir_path[25] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Studio C.wav"
  !ir_path[26] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Contem-Plate.wav"
  !ir_path[27] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Space & Echoes.wav"
  !ir_path[28] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Medium Stop.wav"
  !ir_path[29] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Drum Cave.wav"
  !ir_path[30] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Large Ambience.wav"
  !ir_path[31] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Smooth Ambience.wav"
  !ir_path[32] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Ambience Wave.wav"
  !ir_path[33] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/L300 Le Gate.wav"
  !ir_path[34] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Basic.wav"
  !ir_path[35] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Disco.wav"
  !ir_path[36] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Funk.wav"
  !ir_path[37] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Funky Club.wav"
  !ir_path[38] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Hip Hop.wav"
  !ir_path[39] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - Reggae Modern.wav"
  !ir_path[40] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - RnB Neptunes.wav"
  !ir_path[41] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/Quadstick Small - RnB Today 1.wav"
  !ir_path[42] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Ambience Large A.wav"
  !ir_path[43] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Ambience Small.wav"
  !ir_path[44] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Chamber Small.wav"
  !ir_path[45] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Chamber Vocal.wav"
  !ir_path[46] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Hall Dense.wav"
  !ir_path[47] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Location Chapel A.wav"
  !ir_path[48] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Plate Snare.wav"
  !ir_path[49] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Room Drum.wav"
  !ir_path[50] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Room Wood.wav"
  !ir_path[51] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/BRT 7 Location Cineastic Room.wav"
  !ir_path[52] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E245 0.5s A.wav"
  !ir_path[53] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E245 1.0s A.wav"
  !ir_path[54] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E245 1.4s A.wav"
  !ir_path[55] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E245 2.1s A.wav"
  !ir_path[56] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E245 4.5s A.wav"
  !ir_path[57] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E252 0.6s.wav"
  !ir_path[58] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E252 1.0s.wav"
  !ir_path[59] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E252 1.8s.wav"
  !ir_path[60] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E252 3.0s.wav"
  !ir_path[61] := "presets/effects/convolution/<<<K4IR.nkx>>>/K4 IR Samples/E252 4.5s.wav"
  !ir_path[62] := "presets/effects/convolution/17 Cabinets/Brit 212/IR Samples/Brit_212_Tube_Center.wav"
  !ir_path[63] := "presets/effects/convolution/17 Cabinets/Tweed 112/IR Samples/Tweed_112_Tube_Center.wav"
  !ir_path[64] := "presets/effects/convolution/17 Cabinets/Tweed 212/IR Samples/Tweed_212_Tube_Center.wav"
  !ir_path[65] := "presets/effects/convolution/17 Cabinets/Tweed 410/IR Samples/Tweed_410_Tube_Center.wav"
  !ir_path[66] := "presets/effects/convolution/17 Cabinets/Rock 412/IR Samples/Rock_412_Tube_Center.wav"
  !ir_path[67] := "presets/effects/convolution/17 Cabinets/Modern 412/IR Samples/Modern_412_Tube_Center.wav"
  declare !ir_type[68]
  !ir_type[0] := "Concert Hall A"
  !ir_type[1] := "Concert Hall B"
  !ir_type[2] := "Exhibition Hall"
  !ir_type[3] := "Cathedral A"
  !ir_type[4] := "Cathedral B"
  !ir_type[5] := "NDB Cathedral"
  !ir_type[6] := "Club A"
  !ir_type[7] := "Club B"
  !ir_type[8] := "Tavern Close"
  !ir_type[9] := "Tavern Near"
  !ir_type[10] := "Tavern Mid"
  !ir_type[11] := "Tavern Far"
  !ir_type[12] := "Auditorium A"
  !ir_type[13] := "Auditorium B"
  !ir_type[14] := "Chamber A"
  !ir_type[15] := "Chamber B"
  !ir_type[16] := "Rehearsal"
  !ir_type[17] := "Hard Wood"
  !ir_type[18] := "Music Studio"
  !ir_type[19] := "Small Room A"
  !ir_type[20] := "Small Room B"
  !ir_type[21] := "Large Hall"
  !ir_type[22] := "Gated Hall"
  !ir_type[23] := "Large Room"
  !ir_type[24] := "Large Chamber"
  !ir_type[25] := "Studio C"
  !ir_type[26] := "Contem-Plate"
  !ir_type[27] := "Echoes"
  !ir_type[28] := "Medium Stop"
  !ir_type[29] := "Drum Cave"
  !ir_type[30] := "Large Ambi"
  !ir_type[31] := "Smooth Ambi"
  !ir_type[32] := "Ambi Wave"
  !ir_type[33] := "Le Gate"
  !ir_type[34] := "Basic"
  !ir_type[35] := "Disco"
  !ir_type[36] := "Funk"
  !ir_type[37] := "Funky Club"
  !ir_type[38] := "Hip Hop"
  !ir_type[39] := "Reggae Modern"
  !ir_type[40] := "RnB Neptunes"
  !ir_type[41] := "RnB Today"
  !ir_type[42] := "Lrg Ambience"
  !ir_type[43] := "Sml Ambience"
  !ir_type[44] := "Sml Chamber"
  !ir_type[45] := "Voc Chamber"
  !ir_type[46] := "Dense Hall"
  !ir_type[47] := "Chapel"
  !ir_type[48] := "Snare Plate"
  !ir_type[49] := "Drum Room"
  !ir_type[50] := "Wood Room"
  !ir_type[51] := "Cineastic"
  !ir_type[52] := "E245 0.5s"
  !ir_type[53] := "E245 1.0s"
  !ir_type[54] := "E245 1.4s"
  !ir_type[55] := "E245 2.1s"
  !ir_type[56] := "E245 4.5s"
  !ir_type[57] := "E252 0.6s"
  !ir_type[58] := "E252 1.0s"
  !ir_type[59] := "E252 1.8s"
  !ir_type[60] := "E252 3.0s"
  !ir_type[61] := "E252 4.5s"
  !ir_type[62] := "Brit 2x12"
  !ir_type[63] := "Tweed 1x12"
  !ir_type[64] := "Tweed 2x12"
  !ir_type[65] := "Tweed 4x10"
  !ir_type[66] := "Rock 4x12"
  !ir_type[67] := "Modern 4x12"
  $count := 0
  while ($count<68)
    if ($count<3)
      add_menu_item($hall_reverb,!ir_type[$count],$count)
    else
      if ($count<6)
        add_menu_item($cathedral_reverb,!ir_type[$count],$count)
      else
        if ($count<14)
          add_menu_item($club_reverb,!ir_type[$count],$count)
        else
          if ($count<21)
            add_menu_item($room_reverb,!ir_type[$count],$count)
          else
            if ($count<34)
              add_menu_item($l300_reverb,!ir_type[$count],$count)
            else
              if ($count<42)
                add_menu_item($quadstick_reverb,!ir_type[$count],$count)
              else
                if ($count<52)
                  add_menu_item($brt7_reverb,!ir_type[$count],$count)
                else
                  if ($count<62)
                    add_menu_item($plate_reverb,!ir_type[$count],$count)
                  else
                    add_menu_item($cabinet_reverb,!ir_type[$count],$count)
                  end if
                end if
              end if
            end if
          end if
        end if
      end if
    end if
    inc($count)
  end while
  make_persistent($category_reverb)
  make_persistent($hall_reverb)
  make_persistent($cathedral_reverb)
  make_persistent($club_reverb)
  make_persistent($room_reverb)
  make_persistent($l300_reverb)
  make_persistent($quadstick_reverb)
  make_persistent($brt7_reverb)
  make_persistent($plate_reverb)
  make_persistent($cabinet_reverb)
  _read_persistent_var($category_reverb)
  _read_persistent_var($hall_reverb)
  _read_persistent_var($cathedral_reverb)
  _read_persistent_var($club_reverb)
  _read_persistent_var($room_reverb)
  _read_persistent_var($l300_reverb)
  _read_persistent_var($quadstick_reverb)
  _read_persistent_var($brt7_reverb)
  _read_persistent_var($plate_reverb)
  _read_persistent_var($cabinet_reverb)
  $start := 50
  $y := 315
  $distance := 80
  $count := 0
  while ($count<9)
    set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_POS_X,$start)
    set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_POS_Y,$y+26)
    set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_WIDTH,110)
    inc($count)
  end while
  set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_POS_X,$start)
  set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_POS_Y,$y)
  set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_WIDTH,110)
  set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($category_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($hall_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($hall_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($cathedral_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($cathedral_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($club_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($club_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($room_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($room_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($l300_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($l300_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($quadstick_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($quadstick_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($brt7_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($brt7_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($plate_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($plate_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  set_control_par(get_ui_id($cabinet_reverb),$CONTROL_PAR_FONT_TYPE,$FONT_ID)
  set_control_par_str(get_ui_id($cabinet_reverb),$CONTROL_PAR_PICTURE,"verbLabel")
  declare ui_menu $sliceDrop
  set_control_par(get_ui_id($sliceDrop),$CONTROL_PAR_FONT_TYPE,1)
  set_control_par_str(get_ui_id($sliceDrop),$CONTROL_PAR_PICTURE,"SeeThroughSliceDrop")
  set_control_par_str(get_ui_id($sliceDrop),$CONTROL_PAR_HELP,"Click here to select a slice")
  add_menu_item($sliceDrop,"Slice 1",0)
  add_menu_item($sliceDrop,"Slice 2",1)
  add_menu_item($sliceDrop,"Slice 3",2)
  add_menu_item($sliceDrop,"Slice 4",3)
  add_menu_item($sliceDrop,"Slice 5",4)
  add_menu_item($sliceDrop,"Slice 6",5)
  add_menu_item($sliceDrop,"Slice 7",6)
  add_menu_item($sliceDrop,"Slice 8",7)
  add_menu_item($sliceDrop,"Slice 9",8)
  add_menu_item($sliceDrop,"Slice 10",9)
  add_menu_item($sliceDrop,"Slice 11",10)
  add_menu_item($sliceDrop,"Slice 12",11)
  add_menu_item($sliceDrop,"Slice 13",12)
  add_menu_item($sliceDrop,"Slice 14",13)
  add_menu_item($sliceDrop,"Slice 15",14)
  add_menu_item($sliceDrop,"Slice 16",15)
  move_control_px($sliceDrop,80,253)
  declare ui_menu $FXDrop
  set_control_par(get_ui_id($FXDrop),$CONTROL_PAR_FONT_TYPE,1)
  set_control_par_str(get_ui_id($FXDrop),$CONTROL_PAR_PICTURE,"SeeThroughSliceDrop")
  set_control_par_str(get_ui_id($FXDrop),$CONTROL_PAR_HELP,"Click here to select an FX tab")
  add_menu_item($FXDrop,"Volume",0)
  add_menu_item($FXDrop,"Pitch",1)
  add_menu_item($FXDrop,"Pan",2)
  add_menu_item($FXDrop,"Filter",3)
  add_menu_item($FXDrop,"Crush",4)
  add_menu_item($FXDrop,"Sends",5)
  add_menu_item($FXDrop,"Glitch FX",6)
  $count := 1
  while ($count<16)
    set_menu_item_visibility(get_ui_id($sliceDrop),$count,0)
    inc($count)
  end while
  move_control_px($FXDrop,200,253)
  declare ui_label $tabPic(0, 0) 
  declare $tabPic_id
  $tabPic_id := get_ui_id($tabPic)
  set_control_par_str($tabPic_id,$CONTROL_PAR_PICTURE,"tabPics")
  set_control_par_str($tabPic_id,$CONTROL_PAR_TEXT,"")
  set_control_par($tabPic_id,$CONTROL_PAR_POS_Y,220)
  set_control_par($tabPic_id,$CONTROL_PAR_POS_X,14)
  set_control_par($tabPic_id,$CONTROL_PAR_WIDTH,289)
  set_control_par($tabPic_id,$CONTROL_PAR_HEIGHT,265)
  set_control_par($tabPic_id,$CONTROL_PAR_PICTURE_STATE,0)
  declare %delayArray4[380]
  load_array(%delayArray4,1)
  declare %delayArray4t[380]
  load_array(%delayArray4t,1)
  declare %delayArray8[380]
  load_array(%delayArray8,1)
  declare %delayArray8t[380]
  load_array(%delayArray8t,1)
  declare %delayArray16[380]
  load_array(%delayArray16,1)
  declare %delayArray16t[380]
  load_array(%delayArray16t,1)
  declare %delayArray316[380]
  load_array(%delayArray316,1)
  declare %delayArray32[380]
  load_array(%delayArray32,1)
  declare %lfoArray4[380]
  load_array(%lfoArray4,1)
  declare %lfoArray4t[380]
  load_array(%lfoArray4t,1)
  declare %lfoArray8[380]
  load_array(%lfoArray8,1)
  declare %lfoArray8t[380]
  load_array(%lfoArray8t,1)
  declare %lfoArray16[380]
  load_array(%lfoArray16,1)
  declare %lfoArray16t[380]
  load_array(%lfoArray16t,1)
  declare %lfoArray316[380]
  load_array(%lfoArray316,1)
  declare %lfoArray32[380]
  load_array(%lfoArray32,1)
  declare ui_button $oneShotDown
  declare ui_button $oneShotUp
  declare ui_button $quantiseDown
  declare ui_button $quantiseUp
  declare ui_button $tempoDown
  declare ui_button $tempoUp
  declare ui_button $barsDown
  declare ui_button $barsUp
  declare ui_label $oneShotLabel(0, 0) 
  declare ui_label $quantiseLabel(0, 0) 
  declare ui_label $tempoLabel(0, 0) 
  declare ui_label $barsLabel(0, 0) 
  set_control_par_str(get_ui_id($oneShotDown),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($oneShotUp),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($quantiseDown),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($quantiseUp),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($tempoDown),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($tempoUp),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($barsDown),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par_str(get_ui_id($barsUp),$CONTROL_PAR_PICTURE,"arrowButton")
  set_control_par(get_ui_id($oneShotDown),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($oneShotUp),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($quantiseDown),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($quantiseUp),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($tempoDown),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($tempoUp),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($barsDown),$CONTROL_PAR_WIDTH,20)
  set_control_par(get_ui_id($barsUp),$CONTROL_PAR_WIDTH,20)
  set_control_par_str(get_ui_id($oneShotDown),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($oneShotDown),$CONTROL_PAR_HELP,"Select between one shot or loop mode. Please be aware that Glitch FX are disabled in one shot mode")
  set_control_par_str(get_ui_id($oneShotUp),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($oneShotUp),$CONTROL_PAR_HELP,"Select between one shot or loop mode. Please be aware that Glitch FX are disabled in one shot mode")
  set_control_par_str(get_ui_id($quantiseDown),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($quantiseDown),$CONTROL_PAR_HELP,"Select a value for quantise slice")
  set_control_par_str(get_ui_id($quantiseUp),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($quantiseUp),$CONTROL_PAR_HELP,"Select a value for quantise slice")
  set_control_par_str(get_ui_id($tempoDown),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($tempoDown),$CONTROL_PAR_HELP,"Enable or disable tempo syncing. Please be aware that pitch shifting with tempo sync disabled will cause the audio to change speed")
  set_control_par_str(get_ui_id($tempoUp),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($tempoUp),$CONTROL_PAR_HELP,"Enable or disable tempo syncing. Please be aware that pitch shifting with tempo sync disabled will cause the audio to change speed")
  set_control_par_str(get_ui_id($barsDown),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($barsDown),$CONTROL_PAR_HELP,"Select the number of active bars, either 2 or 4. Each set of available bars can be seen by changing between views")
  set_control_par_str(get_ui_id($barsUp),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($barsUp),$CONTROL_PAR_HELP,"Select the number of active bars, either 2 or 4. Each set of available bars can be seen by changing between views")
  set_control_par_str(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE,"OneShotLabel")
  set_control_par_str(get_ui_id($oneShotLabel),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($oneShotLabel),$CONTROL_PAR_HELP,"Select between one shot or loop mode. Please be aware that Glitch FX are disabled in one shot mode")
  set_control_par_str(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE,"QuantiseLabel")
  set_control_par_str(get_ui_id($quantiseLabel),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($quantiseLabel),$CONTROL_PAR_HELP,"Select a value for quantise slice")
  set_control_par_str(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE,"TempoSync")
  set_control_par_str(get_ui_id($tempoLabel),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($tempoLabel),$CONTROL_PAR_HELP,"Enable or disable tempo syncing. Please be aware that pitch shifting with tempo sync disabled will cause the audio to change speed")
  set_control_par_str(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE,"ActiveBars")
  set_control_par_str(get_ui_id($barsLabel),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($barsLabel),$CONTROL_PAR_HELP,"Select the number of active bars, either 2 or 4. Each set of available bars can be seen by changing between views")
  declare $gridY
  declare $yDistance
  $y := 153
  $gridY := 163
  $start := 20
  move_control_px($oneShotLabel,380,$y)
  move_control_px($quantiseLabel,213,$y)
  move_control_px($tempoLabel,553,$y)
  move_control_px($barsLabel,398,$y+20)
  move_control_px($oneShotDown,373,$y)
  move_control_px($oneShotUp,440,$y)
  move_control_px($quantiseDown,228,$y)
  move_control_px($quantiseUp,272,$y)
  move_control_px($tempoDown,548,$y)
  move_control_px($tempoUp,585,$y)
  move_control_px($barsDown,380,$y+20)
  move_control_px($barsUp,405,$y+20)
  declare ui_button $test1
  declare ui_button $test2
  declare ui_button $test3
  declare ui_button $test4
  declare ui_button $test5
  declare ui_button $test6
  declare ui_button $test7
  declare ui_button $test8
  declare ui_button $test9
  declare ui_button $test10
  declare ui_button $test11
  declare ui_button $test12
  declare ui_button $test13
  declare ui_button $test14
  declare ui_button $test15
  declare ui_button $test16
  declare ui_button $test17
  declare ui_button $test18
  declare ui_button $test19
  declare ui_button $test20
  declare ui_button $test21
  declare ui_button $test22
  declare ui_button $test23
  declare ui_button $test24
  declare ui_button $test25
  declare ui_button $test26
  declare ui_button $test27
  declare ui_button $test28
  declare ui_button $test29
  declare ui_button $test30
  declare ui_button $test31
  declare %test_id[31]
  %test_id[0] := get_ui_id($test1)
  %test_id[1] := get_ui_id($test2)
  %test_id[2] := get_ui_id($test3)
  %test_id[3] := get_ui_id($test4)
  %test_id[4] := get_ui_id($test5)
  %test_id[5] := get_ui_id($test6)
  %test_id[6] := get_ui_id($test7)
  %test_id[7] := get_ui_id($test8)
  %test_id[8] := get_ui_id($test9)
  %test_id[9] := get_ui_id($test10)
  %test_id[10] := get_ui_id($test11)
  %test_id[11] := get_ui_id($test12)
  %test_id[12] := get_ui_id($test13)
  %test_id[13] := get_ui_id($test14)
  %test_id[14] := get_ui_id($test15)
  %test_id[15] := get_ui_id($test16)
  %test_id[16] := get_ui_id($test17)
  %test_id[17] := get_ui_id($test18)
  %test_id[18] := get_ui_id($test19)
  %test_id[19] := get_ui_id($test20)
  %test_id[20] := get_ui_id($test21)
  %test_id[21] := get_ui_id($test22)
  %test_id[22] := get_ui_id($test23)
  %test_id[23] := get_ui_id($test24)
  %test_id[24] := get_ui_id($test25)
  %test_id[25] := get_ui_id($test26)
  %test_id[26] := get_ui_id($test27)
  %test_id[27] := get_ui_id($test28)
  %test_id[28] := get_ui_id($test29)
  %test_id[29] := get_ui_id($test30)
  %test_id[30] := get_ui_id($test31)
  $count := 0
  while ($count<31)
    set_control_par_str(%test_id[$count],$CONTROL_PAR_PICTURE,"buttonTest")
    set_control_par_str(%test_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%test_id[$count],$CONTROL_PAR_HELP,"Click anywhere along the top of the waveform to add a new slice. There is a maximum of 8 slices per view")
    set_control_par(%test_id[$count],$CONTROL_PAR_HEIGHT,21)
    set_control_par(%test_id[$count],$CONTROL_PAR_WIDTH,21)
    set_control_par(%test_id[$count],$CONTROL_PAR_POS_X,$wave_start+10+($count*19))
    set_control_par(%test_id[$count],$CONTROL_PAR_POS_Y,0)
    inc($count)
  end while
  declare ui_switch $tabA
  declare ui_switch $tabB
  set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_HELP,"Click here to switch between views. Each view can have up to 8 slices active. These views can be played individually or in sequence")
  set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_HELP,"Click here to switch between views. Each view can have up to 8 slices active. These views can be played individually or in sequence")
  set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_PICTURE,"TabA2")
  set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_PICTURE,"TabB1")
  declare $tabbed
  declare $tabMod
  declare $playMod
  declare $maxLoop
  declare $loopMode
  make_persistent($loopMode)
  _read_persistent_var($loopMode)
  $tabMod := 0
  $playMod := 0
  declare $tabAslices
  declare $tabBslices
  make_persistent($tabAslices)
  make_persistent($tabBslices)
  _read_persistent_var($tabAslices)
  _read_persistent_var($tabBslices)
  $tabbed := 0
  $tabA := 1
  declare ui_slider $aVol(0, 1000000) 
  declare ui_slider $aAttack(0, 1000000) 
  declare ui_slider $aDecay(500000, 1000000) 
  declare %volAux[3]
  %volAux[0] := get_ui_id($aVol)
  %volAux[1] := get_ui_id($aAttack)
  %volAux[2] := get_ui_id($aDecay)
  declare %attack_state[16] := (0)
  declare %decay_state[16] := (1000000)
  make_persistent(%attack_state)
  _read_persistent_var(%attack_state)
  make_persistent(%decay_state)
  _read_persistent_var(%decay_state)
  $start := 42
  $y := 300
  $y2 := 95
  $distance := 62
  $count := 0
  while ($count<3)
    set_control_par(%volAux[$count],$CONTROL_PAR_POS_Y,$y)
    set_control_par(%volAux[$count],$CONTROL_PAR_POS_X,$start+($count*$distance))
    set_control_par(%volAux[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%volAux[$count],$CONTROL_PAR_WIDTH,64)
    set_control_par(%volAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par_str(%volAux[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%volAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
    inc($count)
  end while
  set_control_par(%volAux[0],$CONTROL_PAR_DEFAULT_VALUE,500000)
  set_control_par(%volAux[1],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%volAux[2],$CONTROL_PAR_DEFAULT_VALUE,1000000)
  set_control_par(%volAux[0],$CONTROL_PAR_VALUE,500000)
  set_control_par(%volAux[1],$CONTROL_PAR_VALUE,0)
  set_control_par(%volAux[2],$CONTROL_PAR_VALUE,1000000)
  set_control_par_str(%volAux[0],$CONTROL_PAR_HELP,"Sets the volume for the current slice")
  set_control_par_str(%volAux[1],$CONTROL_PAR_HELP,"Sets the amp envelope attack for the current slice")
  set_control_par_str(%volAux[2],$CONTROL_PAR_HELP,"Sets the amp envelope decay for the current slice")
  declare ui_slider $aPitch(0, 12) 
  $count := 0
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_POS_Y,$y)
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_POS_X,$start+($count*$distance))
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_HEIGHT,84)
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_WIDTH,64)
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
  set_control_par_str(get_ui_id($aPitch),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($aPitch),$CONTROL_PAR_HELP,"Change the pitch of the current slice. Be aware that changing the pitch with tempo sync disabled will change the speed of the audio")
  set_control_par_str(get_ui_id($aPitch),$CONTROL_PAR_PICTURE,"pitchKnob")
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_DEFAULT_VALUE,6)
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_VALUE,6)
  declare ui_slider $aPan(0, 1000000) 
  declare ui_slider $aAutoPan(0, 8) 
  declare %auto_state[16] := (0)
  make_persistent(%auto_state)
  _read_persistent_var(%auto_state)
  declare %panAux[2]
  %panAux[0] := get_ui_id($aPan)
  %panAux[1] := get_ui_id($aAutoPan)
  $count := 0
  while ($count<2)
    set_control_par(%panAux[$count],$CONTROL_PAR_POS_Y,$y)
    set_control_par(%panAux[$count],$CONTROL_PAR_POS_X,$start+($count*$distance))
    set_control_par(%panAux[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%panAux[$count],$CONTROL_PAR_WIDTH,64)
    set_control_par(%panAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%panAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par_str(%panAux[$count],$CONTROL_PAR_TEXT,"")
    if ($count=0)
      set_control_par_str(%panAux[$count],$CONTROL_PAR_PICTURE,"panKnob")
    else
      set_control_par_str(%panAux[$count],$CONTROL_PAR_PICTURE,"autoKnob")
    end if
    inc($count)
  end while
  set_control_par(%panAux[0],$CONTROL_PAR_DEFAULT_VALUE,500000)
  set_control_par(%panAux[1],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%panAux[0],$CONTROL_PAR_VALUE,500000)
  set_control_par(%panAux[1],$CONTROL_PAR_VALUE,0)
  set_control_par_str(%panAux[0],$CONTROL_PAR_HELP,"Sets the panning for the current slice")
  set_control_par_str(%panAux[1],$CONTROL_PAR_HELP,"Sets the autopan setting for the current slice")
  declare ui_slider $aFilterCutoff(0, 1000000) 
  declare ui_slider $aFilterReso(0, 1000000) 
  declare ui_slider $aFilterAttack(0, 1000000) 
  declare ui_slider $aFilterDecay(0, 1000000) 
  declare ui_slider $aFilterWave(0, 3) 
  declare ui_slider $aFilterFreq(0, 7) 
  declare ui_slider $aFilterAmt(0, 1000000) 
  declare %filterAux[7]
  %filterAux[0] := get_ui_id($aFilterCutoff)
  %filterAux[1] := get_ui_id($aFilterReso)
  %filterAux[2] := get_ui_id($aFilterAttack)
  %filterAux[3] := get_ui_id($aFilterDecay)
  %filterAux[4] := get_ui_id($aFilterWave)
  %filterAux[5] := get_ui_id($aFilterFreq)
  %filterAux[6] := get_ui_id($aFilterAmt)
  declare %reso_state[16] := (0)
  declare %fAttack_state[16] := (0)
  declare %fDecay_state[16] := (0)
  declare %wave_state[16] := (0)
  declare %freq_state[16] := (0)
  declare %amt_state[16] := (0)
  make_persistent(%reso_state)
  _read_persistent_var(%reso_state)
  make_persistent(%fAttack_state)
  _read_persistent_var(%fAttack_state)
  make_persistent(%fDecay_state)
  _read_persistent_var(%fDecay_state)
  make_persistent(%wave_state)
  _read_persistent_var(%wave_state)
  make_persistent(%freq_state)
  _read_persistent_var(%freq_state)
  make_persistent(%amt_state)
  _read_persistent_var(%amt_state)
  $count := 0
  while ($count<7)
    if ($count>3)
      set_control_par(%filterAux[$count],$CONTROL_PAR_POS_Y,$y+$y2)
      set_control_par(%filterAux[$count],$CONTROL_PAR_POS_X,$start+(($count-4)*$distance))
    else
      set_control_par(%filterAux[$count],$CONTROL_PAR_POS_Y,$y)
      set_control_par(%filterAux[$count],$CONTROL_PAR_POS_X,$start+($count*$distance))
    end if
    set_control_par(%filterAux[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%filterAux[$count],$CONTROL_PAR_WIDTH,64)
    set_control_par(%filterAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%filterAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par_str(%filterAux[$count],$CONTROL_PAR_TEXT,"")
    select ($count)
      case 0 to 3
        set_control_par_str(%filterAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
      case 4
        set_control_par_str(%filterAux[$count],$CONTROL_PAR_PICTURE,"lfoKnob")
      case 5
        set_control_par_str(%filterAux[$count],$CONTROL_PAR_PICTURE,"delayKnob")
      case 6
        set_control_par_str(%filterAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
    end select
    inc($count)
  end while
  set_control_par(%filterAux[0],$CONTROL_PAR_DEFAULT_VALUE,1000000)
  set_control_par(%filterAux[1],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[2],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[3],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[4],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[5],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[6],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%filterAux[0],$CONTROL_PAR_VALUE,1000000)
  set_control_par(%filterAux[1],$CONTROL_PAR_VALUE,0)
  set_control_par(%filterAux[2],$CONTROL_PAR_VALUE,0)
  set_control_par(%filterAux[3],$CONTROL_PAR_VALUE,0)
  set_control_par(%filterAux[4],$CONTROL_PAR_VALUE,0)
  set_control_par(%filterAux[5],$CONTROL_PAR_VALUE,0)
  set_control_par(%filterAux[6],$CONTROL_PAR_VALUE,0)
  set_control_par_str(%filterAux[0],$CONTROL_PAR_HELP,"Sets the cutoff frequency for the current slices filter")
  set_control_par_str(%filterAux[1],$CONTROL_PAR_HELP,"Sets the resonance for the current slices filter")
  set_control_par_str(%filterAux[2],$CONTROL_PAR_HELP,"Sets the envelope attack for the current slices filter cutoff")
  set_control_par_str(%filterAux[3],$CONTROL_PAR_HELP,"Sets the envelope decay for the current slices filter cutoff")
  set_control_par_str(%filterAux[4],$CONTROL_PAR_HELP,"Sets the lfo wave shape for the current slices filter cutoff")
  set_control_par_str(%filterAux[5],$CONTROL_PAR_HELP,"Sets the lfo sync speed for the current slices filter cutoff")
  set_control_par_str(%filterAux[6],$CONTROL_PAR_HELP,"Sets the lfo amount for the current slices filter cutoff")
  declare ui_slider $aLofiBit(0, 1000000) 
  declare ui_slider $aLofiSamp(0, 1000000) 
  declare %LofiAux[2]
  %LofiAux[0] := get_ui_id($aLofiSamp)
  %LofiAux[1] := get_ui_id($aLofiBit)
  declare %bit_state[16] := (1000000)
  make_persistent(%bit_state)
  _read_persistent_var(%bit_state)
  $count := 0
  while ($count<2)
    set_control_par(%LofiAux[$count],$CONTROL_PAR_POS_Y,$y)
    set_control_par(%LofiAux[$count],$CONTROL_PAR_POS_X,$start+($count*$distance))
    set_control_par(%LofiAux[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%LofiAux[$count],$CONTROL_PAR_WIDTH,64)
    set_control_par(%LofiAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par_str(%LofiAux[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%LofiAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
    set_control_par(%lofiAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    inc($count)
  end while
  set_control_par(%LofiAux[0],$CONTROL_PAR_DEFAULT_VALUE,1000000)
  set_control_par(%LofiAux[1],$CONTROL_PAR_DEFAULT_VALUE,1000000)
  set_control_par(%LofiAux[0],$CONTROL_PAR_VALUE,1000000)
  set_control_par(%LofiAux[1],$CONTROL_PAR_VALUE,1000000)
  set_control_par_str(%LofiAux[0],$CONTROL_PAR_HELP,"Set the sample rate for the current slices crush effect")
  set_control_par_str(%LofiAux[1],$CONTROL_PAR_HELP,"Set the bit rate for the current slices crush effect")
  declare ui_slider $aVerbSend(0, 500000) 
  declare ui_slider $aVerbSize(0, 1000000) 
  declare ui_slider $aDelaySend(0, 500000) 
  declare ui_slider $aDelayTime(0, 7) 
  declare ui_slider $aDelayFeedback(0, 1000000) 
  declare ui_slider $aDelayDamp(0, 1000000) 
  declare %sendAux[7]
  %sendAux[0] := get_ui_id($aVerbSend)
  %sendAux[1] := get_ui_id($aVerbSize)
  %sendAux[2] := 0
  %sendAux[3] := get_ui_id($aDelaySend)
  %sendAux[4] := get_ui_id($aDelayTime)
  %sendAux[5] := get_ui_id($aDelayFeedback)
  %sendAux[6] := get_ui_id($aDelayDamp)
  $count := 0
  while ($count<7)
    if ($count # 2)
      if ($count>2)
        set_control_par(%sendAux[$count],$CONTROL_PAR_POS_Y,$y+$y2)
        set_control_par(%sendAux[$count],$CONTROL_PAR_POS_X,$start+(($count-3)*$distance))
      else
        set_control_par(%sendAux[$count],$CONTROL_PAR_POS_Y,$y)
        set_control_par(%sendAux[$count],$CONTROL_PAR_POS_X,$start+(($count+2)*$distance))
      end if
      set_control_par(%sendAux[$count],$CONTROL_PAR_HEIGHT,84)
      set_control_par(%sendAux[$count],$CONTROL_PAR_WIDTH,64)
      set_control_par(%sendAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(%sendAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
      set_control_par_str(%sendAux[$count],$CONTROL_PAR_TEXT,"")
      select ($count)
        case 0 to 3
          set_control_par_str(%sendAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
        case 4
          set_control_par_str(%sendAux[$count],$CONTROL_PAR_PICTURE,"delayKnob")
        case 5 to 6
          set_control_par_str(%sendAux[$count],$CONTROL_PAR_PICTURE,"plusKnob")
      end select
    end if
    inc($count)
  end while
  set_control_par(%sendAux[0],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[1],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[3],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[4],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[5],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[6],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%sendAux[0],$CONTROL_PAR_VALUE,0)
  set_control_par(%sendAux[1],$CONTROL_PAR_VALUE,0)
  set_control_par(%sendAux[3],$CONTROL_PAR_VALUE,0)
  set_control_par(%sendAux[4],$CONTROL_PAR_VALUE,0)
  set_control_par(%sendAux[5],$CONTROL_PAR_VALUE,0)
  set_control_par(%sendAux[6],$CONTROL_PAR_VALUE,0)
  set_control_par_str(%sendAux[0],$CONTROL_PAR_HELP,"The amount of reverb send for the current slice")
  set_control_par_str(%sendAux[1],$CONTROL_PAR_HELP,"The size of the global reverb effect")
  set_control_par_str(%sendAux[3],$CONTROL_PAR_HELP,"The amount of delay send for the current slice")
  set_control_par_str(%sendAux[4],$CONTROL_PAR_HELP,"The speed of the global delay effect")
  set_control_par_str(%sendAux[5],$CONTROL_PAR_HELP,"The feedback of the global delay effect")
  set_control_par_str(%sendAux[6],$CONTROL_PAR_HELP,"The damping of the global delay effect")
  make_persistent($aVerbSize)
  _read_persistent_var($aVerbSize)
  make_persistent($aDelayTime)
  _read_persistent_var($aDelayTime)
  make_persistent($aDelayFeedback)
  _read_persistent_var($aDelayFeedback)
  make_persistent($aDelayDamp)
  _read_persistent_var($aDelayDamp)
  declare ui_slider $aStutter(0, 8) 
  declare ui_slider $aJump(0, 8) 
  declare ui_slider $aJumpD(0, 2) 
  declare ui_slider $aJumpGap(0, 7) 
  declare %glitchAux[4]
  %glitchAux[0] := get_ui_id($aStutter)
  %glitchAux[1] := get_ui_id($aJump)
  %glitchAux[2] := get_ui_id($aJumpD)
  %glitchaux[3] := get_ui_id($aJumpGap)
  declare %jumpD_state[16] := (0)
  declare %jumpGap_state[16] := (0)
  make_persistent(%jumpD_state)
  _read_persistent_var(%jumpD_state)
  make_persistent(%jumpGap_state)
  _read_persistent_var(%jumpGap_state)
  $count := 0
  while ($count<4)
    set_control_par(%glitchAux[$count],$CONTROL_PAR_POS_Y,$y)
    set_control_par(%glitchAux[$count],$CONTROL_PAR_POS_X,$start+($count*$distance))
    set_control_par(%glitchAux[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%glitchAux[$count],$CONTROL_PAR_WIDTH,64)
    set_control_par(%glitchAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%glitchAux[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par_str(%glitchAux[$count],$CONTROL_PAR_TEXT,"")
    inc($count)
  end while
  set_control_par_str(%glitchAux[0],$CONTROL_PAR_PICTURE,"autoKnob")
  set_control_par_str(%glitchAux[1],$CONTROL_PAR_PICTURE,"autoKnob")
  set_control_par_str(%glitchAux[2],$CONTROL_PAR_PICTURE,"modeKnob")
  set_control_par_str(%glitchAux[3],$CONTROL_PAR_PICTURE,"delayKnob")
  set_control_par(%glitchAux[0],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%glitchAux[1],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%glitchAux[2],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%glitchAux[3],$CONTROL_PAR_DEFAULT_VALUE,0)
  set_control_par(%glitchAux[0],$CONTROL_PAR_VALUE,0)
  set_control_par(%glitchAux[1],$CONTROL_PAR_VALUE,0)
  set_control_par(%glitchAux[2],$CONTROL_PAR_VALUE,0)
  set_control_par(%glitchAux[3],$CONTROL_PAR_VALUE,0)
  set_control_par_str(%glitchAux[0],$CONTROL_PAR_HELP,"Loops the slice by the given value. All Glitch FX are disabled in one shot mode")
  set_control_par_str(%glitchAux[1],$CONTROL_PAR_HELP,"Play position jumps by the given value. All Glitch FX are disabled in one shot mode")
  set_control_par_str(%glitchAux[2],$CONTROL_PAR_HELP,"Random mode: Plays audio at random positions determined by Jump value. Forward / Backward mode: Plays audio in the corresponding direction. Play position is determined by Jump value and Distance. All Glitch FX are disabled in one shot mode")
  set_control_par_str(%glitchAux[3],$CONTROL_PAR_HELP,"Sets the distance that play position jumps. This parameter has no effect in Random mode. All Glitch FX are disabled in one shot mode")
  $start := 565
  $distance := 22
  $y := 261
  declare ui_switch $reverse0
  declare ui_switch $reverse1
  declare ui_switch $reverse2
  declare ui_switch $reverse3
  declare ui_switch $reverse4
  declare ui_switch $reverse5
  declare ui_switch $reverse6
  declare ui_switch $reverse7
  declare %reverse_id[$maxSlices]
  %reverse_id[0] := get_ui_id($reverse0)
  %reverse_id[1] := get_ui_id($reverse1)
  %reverse_id[2] := get_ui_id($reverse2)
  %reverse_id[3] := get_ui_id($reverse3)
  %reverse_id[4] := get_ui_id($reverse4)
  %reverse_id[5] := get_ui_id($reverse5)
  %reverse_id[6] := get_ui_id($reverse6)
  %reverse_id[7] := get_ui_id($reverse7)
  $count := 0
  while ($count<($maxSlices/2))
    if ($count>0)
      set_control_par(%reverse_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    end if
    set_control_par(%reverse_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$distance))
    set_control_par(%reverse_id[$count],$CONTROL_PAR_POS_X,$start)
    set_control_par(%reverse_id[$count],$CONTROL_PAR_HEIGHT,30)
    set_control_par(%reverse_id[$count],$CONTROL_PAR_WIDTH,30)
    set_control_par_str(%reverse_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%reverse_id[$count],$CONTROL_PAR_HELP,"Enable or disable reversing for the current slice")
    set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow1")
    inc($count)
  end while
  make_persistent($reverse1)
  make_persistent($reverse2)
  make_persistent($reverse3)
  make_persistent($reverse4)
  make_persistent($reverse5)
  make_persistent($reverse6)
  make_persistent($reverse7)
  make_persistent($reverse0)
  _read_persistent_var($reverse1)
  _read_persistent_var($reverse2)
  _read_persistent_var($reverse3)
  _read_persistent_var($reverse4)
  _read_persistent_var($reverse5)
  _read_persistent_var($reverse6)
  _read_persistent_var($reverse7)
  _read_persistent_var($reverse0)
  $start := 362
  $distance := 23
  $yDistance := 22
  $y := 265
  declare ui_slider $vol1(0, 1000000) 
  declare ui_slider $vol2(0, 1000000) 
  declare ui_slider $vol3(0, 1000000) 
  declare ui_slider $vol4(0, 1000000) 
  declare ui_slider $vol5(0, 1000000) 
  declare ui_slider $vol6(0, 1000000) 
  declare ui_slider $vol7(0, 1000000) 
  declare ui_slider $vol8(0, 1000000) 
  declare %vol_id[8]
  declare %vol_state[$maxSlices] := (500000)
  %vol_id[0] := get_ui_id($vol1)
  %vol_id[1] := get_ui_id($vol2)
  %vol_id[2] := get_ui_id($vol3)
  %vol_id[3] := get_ui_id($vol4)
  %vol_id[4] := get_ui_id($vol5)
  %vol_id[5] := get_ui_id($vol6)
  %vol_id[6] := get_ui_id($vol7)
  %vol_id[7] := get_ui_id($vol8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%vol_id[$count],$CONTROL_PAR_PICTURE,"plusSlider")
    set_control_par_str(%vol_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%vol_id[$count],$CONTROL_PAR_HELP,"Sets the volume for the current slice")
    set_control_par(%vol_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%vol_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%vol_id[$count],$CONTROL_PAR_POS_X,$start)
    set_control_par(%vol_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%vol_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%vol_id[$count],$CONTROL_PAR_DEFAULT_VALUE,500000)
    if ($count>0)
      set_control_par(%vol_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%vol_id[$count],$CONTROL_PAR_VALUE,500000)
    end if
    inc($count)
  end while
  make_persistent($vol1)
  make_persistent($vol2)
  make_persistent($vol3)
  make_persistent($vol4)
  make_persistent($vol5)
  make_persistent($vol6)
  make_persistent($vol7)
  make_persistent($vol8)
  _read_persistent_var($vol1)
  _read_persistent_var($vol2)
  _read_persistent_var($vol3)
  _read_persistent_var($vol4)
  _read_persistent_var($vol5)
  _read_persistent_var($vol6)
  _read_persistent_var($vol7)
  _read_persistent_var($vol8)
  make_persistent(%vol_state)
  _read_persistent_var(%vol_state)
  declare ui_slider $lofi1(0, 1000000) 
  declare ui_slider $lofi2(0, 1000000) 
  declare ui_slider $lofi3(0, 1000000) 
  declare ui_slider $lofi4(0, 1000000) 
  declare ui_slider $lofi5(0, 1000000) 
  declare ui_slider $lofi6(0, 1000000) 
  declare ui_slider $lofi7(0, 1000000) 
  declare ui_slider $lofi8(0, 1000000) 
  declare %lofi_id[8]
  declare %lofi_state[$maxSlices] := (0)
  %lofi_id[0] := get_ui_id($lofi1)
  %lofi_id[1] := get_ui_id($lofi2)
  %lofi_id[2] := get_ui_id($lofi3)
  %lofi_id[3] := get_ui_id($lofi4)
  %lofi_id[4] := get_ui_id($lofi5)
  %lofi_id[5] := get_ui_id($lofi6)
  %lofi_id[6] := get_ui_id($lofi7)
  %lofi_id[7] := get_ui_id($lofi8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%lofi_id[$count],$CONTROL_PAR_PICTURE,"plusSlider")
    set_control_par_str(%lofi_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%lofi_id[$count],$CONTROL_PAR_HELP,"Sets the amount of crush for the current slice")
    set_control_par(%lofi_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%lofi_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%lofi_id[$count],$CONTROL_PAR_POS_X,$start+(4*$distance))
    set_control_par(%lofi_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%lofi_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%lofi_id[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
    if ($count>0)
      set_control_par(%lofi_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%lofi_id[$count],$CONTROL_PAR_VALUE,0)
    end if
    inc($count)
  end while
  make_persistent($lofi1)
  make_persistent($lofi2)
  make_persistent($lofi3)
  make_persistent($lofi4)
  make_persistent($lofi5)
  make_persistent($lofi6)
  make_persistent($lofi7)
  make_persistent($lofi8)
  _read_persistent_var($lofi1)
  _read_persistent_var($lofi2)
  _read_persistent_var($lofi3)
  _read_persistent_var($lofi4)
  _read_persistent_var($lofi5)
  _read_persistent_var($lofi6)
  _read_persistent_var($lofi7)
  _read_persistent_var($lofi8)
  make_persistent(%lofi_state)
  _read_persistent_var(%lofi_state)
  declare ui_slider $pitch1(0, 12) 
  declare ui_slider $pitch2(0, 12) 
  declare ui_slider $pitch3(0, 12) 
  declare ui_slider $pitch4(0, 12) 
  declare ui_slider $pitch5(0, 12) 
  declare ui_slider $pitch6(0, 12) 
  declare ui_slider $pitch7(0, 12) 
  declare ui_slider $pitch8(0, 12) 
  declare %pitch_id[8]
  declare %pitch_state[$maxSlices] := (6)
  %pitch_id[0] := get_ui_id($pitch1)
  %pitch_id[1] := get_ui_id($pitch2)
  %pitch_id[2] := get_ui_id($pitch3)
  %pitch_id[3] := get_ui_id($pitch4)
  %pitch_id[4] := get_ui_id($pitch5)
  %pitch_id[5] := get_ui_id($pitch6)
  %pitch_id[6] := get_ui_id($pitch7)
  %pitch_id[7] := get_ui_id($pitch8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%pitch_id[$count],$CONTROL_PAR_PICTURE,"pitchSlider")
    set_control_par_str(%pitch_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%pitch_id[$count],$CONTROL_PAR_HELP,"Sets the pitch of the current slice. Be aware that changing the pitch with tempo sync disabled alters the speed of the audio")
    set_control_par(%pitch_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%pitch_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%pitch_id[$count],$CONTROL_PAR_POS_X,$start+(1*$distance))
    set_control_par(%pitch_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%pitch_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%pitch_id[$count],$CONTROL_PAR_DEFAULT_VALUE,6)
    if ($count>0)
      set_control_par(%pitch_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%pitch_id[$count],$CONTROL_PAR_VALUE,6)
    end if
    inc($count)
  end while
  make_persistent($pitch1)
  make_persistent($pitch2)
  make_persistent($pitch3)
  make_persistent($pitch4)
  make_persistent($pitch5)
  make_persistent($pitch6)
  make_persistent($pitch7)
  make_persistent($pitch8)
  _read_persistent_var($pitch1)
  _read_persistent_var($pitch2)
  _read_persistent_var($pitch3)
  _read_persistent_var($pitch4)
  _read_persistent_var($pitch5)
  _read_persistent_var($pitch6)
  _read_persistent_var($pitch7)
  _read_persistent_var($pitch8)
  make_persistent(%pitch_state)
  _read_persistent_var(%pitch_state)
  declare ui_slider $pan1(0, 1000000) 
  declare ui_slider $pan2(0, 1000000) 
  declare ui_slider $pan3(0, 1000000) 
  declare ui_slider $pan4(0, 1000000) 
  declare ui_slider $pan5(0, 1000000) 
  declare ui_slider $pan6(0, 1000000) 
  declare ui_slider $pan7(0, 1000000) 
  declare ui_slider $pan8(0, 1000000) 
  declare %pan_id[8]
  declare %pan_state[$maxSlices] := (500000)
  %pan_id[0] := get_ui_id($pan1)
  %pan_id[1] := get_ui_id($pan2)
  %pan_id[2] := get_ui_id($pan3)
  %pan_id[3] := get_ui_id($pan4)
  %pan_id[4] := get_ui_id($pan5)
  %pan_id[5] := get_ui_id($pan6)
  %pan_id[6] := get_ui_id($pan7)
  %pan_id[7] := get_ui_id($pan8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%pan_id[$count],$CONTROL_PAR_PICTURE,"panSlider")
    set_control_par_str(%pan_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%pan_id[$count],$CONTROL_PAR_HELP,"Sets the panning for the current slice")
    set_control_par(%pan_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%pan_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%pan_id[$count],$CONTROL_PAR_POS_X,$start+(2*$distance)+1)
    set_control_par(%pan_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%pan_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%pan_id[$count],$CONTROL_PAR_DEFAULT_VALUE,500000)
    if ($count>0)
      set_control_par(%pan_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,500000)
    end if
    inc($count)
  end while
  make_persistent($pan1)
  make_persistent($pan2)
  make_persistent($pan3)
  make_persistent($pan4)
  make_persistent($pan5)
  make_persistent($pan6)
  make_persistent($pan7)
  make_persistent($pan8)
  _read_persistent_var($pan1)
  _read_persistent_var($pan2)
  _read_persistent_var($pan3)
  _read_persistent_var($pan4)
  _read_persistent_var($pan5)
  _read_persistent_var($pan6)
  _read_persistent_var($pan7)
  _read_persistent_var($pan8)
  make_persistent(%pan_state)
  _read_persistent_var(%pan_state)
  declare ui_slider $stutter1(0, 8) 
  declare ui_slider $stutter2(0, 8) 
  declare ui_slider $stutter3(0, 8) 
  declare ui_slider $stutter4(0, 8) 
  declare ui_slider $stutter5(0, 8) 
  declare ui_slider $stutter6(0, 8) 
  declare ui_slider $stutter7(0, 8) 
  declare ui_slider $stutter8(0, 8) 
  declare %stutter_id[8]
  declare %stutter_state[$maxSlices] := (0)
  %stutter_id[0] := get_ui_id($stutter1)
  %stutter_id[1] := get_ui_id($stutter2)
  %stutter_id[2] := get_ui_id($stutter3)
  %stutter_id[3] := get_ui_id($stutter4)
  %stutter_id[4] := get_ui_id($stutter5)
  %stutter_id[5] := get_ui_id($stutter6)
  %stutter_id[6] := get_ui_id($stutter7)
  %stutter_id[7] := get_ui_id($stutter8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%stutter_id[$count],$CONTROL_PAR_PICTURE,"stutterSlider")
    set_control_par_str(%stutter_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%stutter_id[$count],$CONTROL_PAR_HELP,"Sets the stutter speed for the current slice. All Glitch FX are disabled in one shot mode")
    set_control_par(%stutter_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%stutter_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%stutter_id[$count],$CONTROL_PAR_POS_X,$start+(7*$distance)-1)
    set_control_par(%stutter_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%stutter_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%stutter_id[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
    if ($count>0)
      set_control_par(%stutter_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%stutter_id[$count],$CONTROL_PAR_VALUE,0)
    end if
    inc($count)
  end while
  make_persistent($stutter1)
  make_persistent($stutter2)
  make_persistent($stutter3)
  make_persistent($stutter4)
  make_persistent($stutter5)
  make_persistent($stutter6)
  make_persistent($stutter7)
  make_persistent($stutter8)
  _read_persistent_var($stutter1)
  _read_persistent_var($stutter2)
  _read_persistent_var($stutter3)
  _read_persistent_var($stutter4)
  _read_persistent_var($stutter5)
  _read_persistent_var($stutter6)
  _read_persistent_var($stutter7)
  _read_persistent_var($stutter8)
  make_persistent(%stutter_state)
  _read_persistent_var(%stutter_state)
  declare ui_slider $jump1(0, 8) 
  declare ui_slider $jump2(0, 8) 
  declare ui_slider $jump3(0, 8) 
  declare ui_slider $jump4(0, 8) 
  declare ui_slider $jump5(0, 8) 
  declare ui_slider $jump6(0, 8) 
  declare ui_slider $jump7(0, 8) 
  declare ui_slider $jump8(0, 8) 
  declare %jump_id[8]
  declare %jump_state[$maxSlices] := (0)
  %jump_id[0] := get_ui_id($jump1)
  %jump_id[1] := get_ui_id($jump2)
  %jump_id[2] := get_ui_id($jump3)
  %jump_id[3] := get_ui_id($jump4)
  %jump_id[4] := get_ui_id($jump5)
  %jump_id[5] := get_ui_id($jump6)
  %jump_id[6] := get_ui_id($jump7)
  %jump_id[7] := get_ui_id($jump8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%jump_id[$count],$CONTROL_PAR_PICTURE,"stutterSlider")
    set_control_par_str(%jump_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%jump_id[$count],$CONTROL_PAR_HELP,"Sets the jump speed for the current slice. All Glitch FX are disabled in one shot mode")
    set_control_par(%jump_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%jump_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%jump_id[$count],$CONTROL_PAR_POS_X,$start+(8*$distance)-1)
    set_control_par(%jump_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%jump_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%jump_id[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
    if ($count>0)
      set_control_par(%jump_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%jump_id[$count],$CONTROL_PAR_VALUE,0)
    end if
    inc($count)
  end while
  make_persistent($jump1)
  make_persistent($jump2)
  make_persistent($jump3)
  make_persistent($jump4)
  make_persistent($jump5)
  make_persistent($jump6)
  make_persistent($jump7)
  make_persistent($jump8)
  _read_persistent_var($jump1)
  _read_persistent_var($jump2)
  _read_persistent_var($jump3)
  _read_persistent_var($jump4)
  _read_persistent_var($jump5)
  _read_persistent_var($jump6)
  _read_persistent_var($jump7)
  _read_persistent_var($jump8)
  make_persistent(%jump_state)
  _read_persistent_var(%jump_state)
  declare ui_slider $filter1(0, 1000000) 
  declare ui_slider $filter2(0, 1000000) 
  declare ui_slider $filter3(0, 1000000) 
  declare ui_slider $filter4(0, 1000000) 
  declare ui_slider $filter5(0, 1000000) 
  declare ui_slider $filter6(0, 1000000) 
  declare ui_slider $filter7(0, 1000000) 
  declare ui_slider $filter8(0, 1000000) 
  declare %filter_id[8]
  declare %filter_state[$maxSlices] := (1000000)
  %filter_id[0] := get_ui_id($filter1)
  %filter_id[1] := get_ui_id($filter2)
  %filter_id[2] := get_ui_id($filter3)
  %filter_id[3] := get_ui_id($filter4)
  %filter_id[4] := get_ui_id($filter5)
  %filter_id[5] := get_ui_id($filter6)
  %filter_id[6] := get_ui_id($filter7)
  %filter_id[7] := get_ui_id($filter8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%filter_id[$count],$CONTROL_PAR_PICTURE,"plusSlider")
    set_control_par_str(%filter_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%filter_id[$count],$CONTROL_PAR_HELP,"Sets the cutoff frequency of this slices filter")
    set_control_par(%filter_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%filter_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%filter_id[$count],$CONTROL_PAR_POS_X,$start+(3*$distance))
    set_control_par(%filter_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%filter_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%filter_id[$count],$CONTROL_PAR_DEFAULT_VALUE,1000000)
    if ($count>0)
      set_control_par(%filter_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%filter_id[$count],$CONTROL_PAR_VALUE,1000000)
    end if
    inc($count)
  end while
  make_persistent($filter1)
  make_persistent($filter2)
  make_persistent($filter3)
  make_persistent($filter4)
  make_persistent($filter5)
  make_persistent($filter6)
  make_persistent($filter7)
  make_persistent($filter8)
  _read_persistent_var($filter1)
  _read_persistent_var($filter2)
  _read_persistent_var($filter3)
  _read_persistent_var($filter4)
  _read_persistent_var($filter5)
  _read_persistent_var($filter6)
  _read_persistent_var($filter7)
  _read_persistent_var($filter8)
  make_persistent(%filter_state)
  _read_persistent_var(%filter_state)
  declare ui_slider $verb1(0, 500000) 
  declare ui_slider $verb2(0, 500000) 
  declare ui_slider $verb3(0, 500000) 
  declare ui_slider $verb4(0, 500000) 
  declare ui_slider $verb5(0, 500000) 
  declare ui_slider $verb6(0, 500000) 
  declare ui_slider $verb7(0, 500000) 
  declare ui_slider $verb8(0, 500000) 
  declare %verb_id[8]
  declare %verb_state[$maxSlices] := (0)
  %verb_id[0] := get_ui_id($verb1)
  %verb_id[1] := get_ui_id($verb2)
  %verb_id[2] := get_ui_id($verb3)
  %verb_id[3] := get_ui_id($verb4)
  %verb_id[4] := get_ui_id($verb5)
  %verb_id[5] := get_ui_id($verb6)
  %verb_id[6] := get_ui_id($verb7)
  %verb_id[7] := get_ui_id($verb8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%verb_id[$count],$CONTROL_PAR_PICTURE,"plusSlider")
    set_control_par_str(%verb_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%verb_id[$count],$CONTROL_PAR_HELP,"Sets the reverb send level of the current slice")
    set_control_par(%verb_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%verb_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%verb_id[$count],$CONTROL_PAR_POS_X,$start+(5*$distance))
    set_control_par(%verb_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%verb_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%verb_id[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
    if ($count>0)
      set_control_par(%verb_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%verb_id[$count],$CONTROL_PAR_VALUE,0)
    end if
    inc($count)
  end while
  make_persistent($verb1)
  make_persistent($verb2)
  make_persistent($verb3)
  make_persistent($verb4)
  make_persistent($verb5)
  make_persistent($verb6)
  make_persistent($verb7)
  make_persistent($verb8)
  _read_persistent_var($verb1)
  _read_persistent_var($verb2)
  _read_persistent_var($verb3)
  _read_persistent_var($verb4)
  _read_persistent_var($verb5)
  _read_persistent_var($verb6)
  _read_persistent_var($verb7)
  _read_persistent_var($verb8)
  make_persistent(%verb_state)
  _read_persistent_var(%verb_state)
  declare ui_slider $delay1(0, 500000) 
  declare ui_slider $delay2(0, 500000) 
  declare ui_slider $delay3(0, 500000) 
  declare ui_slider $delay4(0, 500000) 
  declare ui_slider $delay5(0, 500000) 
  declare ui_slider $delay6(0, 500000) 
  declare ui_slider $delay7(0, 500000) 
  declare ui_slider $delay8(0, 500000) 
  declare %delay_id[8]
  declare %delay_state[$maxSlices] := (0)
  %delay_id[0] := get_ui_id($delay1)
  %delay_id[1] := get_ui_id($delay2)
  %delay_id[2] := get_ui_id($delay3)
  %delay_id[3] := get_ui_id($delay4)
  %delay_id[4] := get_ui_id($delay5)
  %delay_id[5] := get_ui_id($delay6)
  %delay_id[6] := get_ui_id($delay7)
  %delay_id[7] := get_ui_id($delay8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%delay_id[$count],$CONTROL_PAR_PICTURE,"plusSlider")
    set_control_par_str(%delay_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par_str(%delay_id[$count],$CONTROL_PAR_HELP,"Sets the delay send level of the current slice")
    set_control_par(%delay_id[$count],$CONTROL_PAR_HEIGHT,35)
    set_control_par(%delay_id[$count],$CONTROL_PAR_WIDTH,35)
    set_control_par(%delay_id[$count],$CONTROL_PAR_POS_X,$start+(6*$distance))
    set_control_par(%delay_id[$count],$CONTROL_PAR_POS_Y,$y+($count*$yDistance))
    set_control_par(%delay_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,-500)
    set_control_par(%delay_id[$count],$CONTROL_PAR_DEFAULT_VALUE,0)
    if ($count>0)
      set_control_par(%delay_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%delay_id[$count],$CONTROL_PAR_VALUE,0)
    end if
    inc($count)
  end while
  make_persistent($delay1)
  make_persistent($delay2)
  make_persistent($delay3)
  make_persistent($delay4)
  make_persistent($delay5)
  make_persistent($delay6)
  make_persistent($delay7)
  make_persistent($delay8)
  _read_persistent_var($delay1)
  _read_persistent_var($delay2)
  _read_persistent_var($delay3)
  _read_persistent_var($delay4)
  _read_persistent_var($delay5)
  _read_persistent_var($delay6)
  _read_persistent_var($delay7)
  _read_persistent_var($delay8)
  make_persistent(%delay_state)
  _read_persistent_var(%delay_state)
  declare %wait_times[$maxSlices] := (0)
  declare %update_slice[$maxSlices] := (1)
  declare %start_points[$maxSlices] := (0)
  declare %slice_index[$maxSlices]
  %slice_index[0] := 0
  %slice_index[8] := 8
  make_persistent(%slice_index)
  _read_persistent_var(%slice_index)
  declare $oneShot
  $oneShot := 0
  make_persistent($oneShot)
  read_persistent_var($oneShot)
  declare $sync
  $sync := 0
  make_persistent($sync)
  read_persistent_var($sync)
  declare $loopCount
  declare $looping
  declare $loopNote
  declare $groupAllow
  declare polyphonic $new_id
  declare $clone_id
  declare $isOn
  declare $on_id
  declare $old_id
  declare $play_pos
  declare $num_slices
  make_persistent($num_slices)
  _read_persistent_var($num_slices)
  declare $startPoint
  declare $nextSlice
  declare $sliceBefore
  declare $slicePos
  declare $sliceDone
  declare $wait
  declare $gridLength
  declare $modWait
  declare $newWait
  declare $ratio
  declare $width1
  declare $position
  declare $selected
  declare $index
  declare $sliceMod
  declare %slice_state[$maxSlices]
  make_persistent(%slice_state)
  _read_persistent_var(%slice_state)
  declare %slice_count[$maxSlices] := (-1)
  %slice_count[0] := 0
  %slice_count[8] := 8
  make_persistent(%slice_count)
  read_persistent_var(%slice_count)
  declare %sliceNext[$maxSlices] := (1)
  %sliceNext[0] := 0
  %sliceNext[8] := 0
  make_persistent(%sliceNext)
  _read_persistent_var(%sliceNext)
  declare %slice_id[$maxSlices]
  make_persistent(%slice_id)
  _read_persistent_var(%slice_id)
  declare ui_button $slicePic1
  declare ui_button $slicePic2
  declare ui_button $slicePic3
  declare ui_button $slicePic4
  declare ui_button $slicePic5
  declare ui_button $slicePic6
  declare ui_button $slicePic7
  declare ui_button $slicePic8
  declare %slicePic_id[$maxSlices/2]
  %slicePic_id[0] := get_ui_id($slicePic1)
  %slicePic_id[1] := get_ui_id($slicePic2)
  %slicePic_id[2] := get_ui_id($slicePic3)
  %slicePic_id[3] := get_ui_id($slicePic4)
  %slicePic_id[4] := get_ui_id($slicePic5)
  %slicePic_id[5] := get_ui_id($slicePic6)
  %slicePic_id[6] := get_ui_id($slicePic7)
  %slicePic_id[7] := get_ui_id($slicePic8)
  $count := 0
  while ($count<($maxSlices/2))
    set_control_par_str(%slicePic_id[$count],$CONTROL_PAR_PICTURE,"yellowLine")
    set_control_par_str(%slicePic_id[$count],$CONTROL_PAR_TEXT,"")
    set_control_par(%slicePic_id[$count],$CONTROL_PAR_HEIGHT,84)
    set_control_par(%slicePic_id[$count],$CONTROL_PAR_WIDTH,10)
    set_control_par(%slicePic_id[$count],$CONTROL_PAR_POS_X,$wave_start)
    set_control_par(%slicePic_id[$count],$CONTROL_PAR_POS_Y,23)
    if (%slice_count[$count]>-1)
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      if (%slice_id[$count]/$pixelLength>532)
        $blueMod := 8
      else
        $blueMod := 6
      end if
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_POS_X,$wave_start+(%slice_id[$count+$tabMod]/$pixelLength)-$blueMod)
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%slice_state[$count+$tabMod])
      set_control_par(%vol_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%vol_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%vol_state[$count+$tabMod])
      set_control_par(%lofi_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%lofi_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%lofi_state[$count+$tabMod])
      set_control_par(%pitch_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%pitch_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%pitch_state[$count+$tabMod])
      set_control_par(%pan_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%pan_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%pan_state[$count+$tabMod])
      set_control_par(%stutter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%stutter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%stutter_state[$count+$tabMod])
      set_control_par(%jump_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%jump_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%jump_state[$count+$tabMod])
      set_control_par(%filter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%filter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%filter_state[$count+$tabMod])
      set_control_par(%verb_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%verb_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%verb_state[$count+$tabMod])
      set_control_par(%delay_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%delay_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%delay_state[$count+$tabMod])
      set_control_par(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      if (%slice_state[$count+$tabMod]=1)
        set_control_par_str(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_PICTURE,"ReverseArrow2")
      else
        set_control_par_str(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_PICTURE,"ReverseArrow1")
      end if
    else
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    end if
    if ($count<=$num_slices)
      set_menu_item_visibility(get_ui_id($sliceDrop),$count,1)
    else
    end if
    inc($count)
  end while
  $count := 0
  while ($count<16)
    if ($count<8)
      if ($count<=$tabAslices)
        set_key_color($count+60,$KEY_COLOR_YELLOW)
      else
        set_key_color($count+60,$KEY_COLOR_WHITE)
      end if
    else
      if ($loopMode=1)
        if ($count<=($tabBslices+8))
          set_key_color($count+60,$KEY_COLOR_BLUE)
        else
          set_key_color($count+60,$KEY_COLOR_WHITE)
        end if
      else
        set_key_color($count+60,$KEY_COLOR_WHITE)
      end if
    end if
    inc($count)
  end while
  declare ui_waveform $wave(1, 1) 
  attach_zone($wave,$main_zone,0)
  move_control_px($wave,$wave_start,21)
  set_control_par(get_ui_id($wave),$CONTROL_PAR_WIDTH,$wave_length)
  set_control_par(get_ui_id($wave),$CONTROL_PAR_HEIGHT,88)
  declare $current_slice
  declare $previous_slice
  declare $slicePicPos
  declare ui_slider $pic1(0, $picLength) 
  declare ui_slider $pic2(0, $picLength) 
  declare ui_slider $pic3(0, $picLength) 
  declare ui_slider $pic4(0, $picLength) 
  declare ui_slider $pic5(0, $picLength) 
  declare ui_slider $pic6(0, $picLength) 
  declare ui_slider $pic7(0, $picLength) 
  declare ui_slider $pic8(0, $picLength) 
  $start := $wave_start
  $distance := 76
  move_control_px($pic1,$start+2,23)
  move_control_px($pic2,$start+$distance,23)
  move_control_px($pic3,$start+($distance*2),23)
  move_control_px($pic4,$start+($distance*3),23)
  move_control_px($pic5,$start+($distance*4),23)
  move_control_px($pic6,$start+($distance*5),23)
  move_control_px($pic7,$start+($distance*6),23)
  move_control_px($pic8,$start+($distance*7)-2,23)
  set_control_par_str(get_ui_id($pic1),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic2),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic3),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic4),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic5),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic6),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic7),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par_str(get_ui_id($pic8),$CONTROL_PAR_PICTURE,"sliceMove")
  set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  declare ui_slider $slice_control(0, $sample_length) 
  move_control_px($slice_control,$wave_start,21)
  set_control_par_str(get_ui_id($slice_control),$CONTROL_PAR_PICTURE,"blankWave")
  set_control_par(get_ui_id($slice_control),$CONTROL_PAR_MOUSE_BEHAVIOUR,2000)
  make_persistent($slice_control)
  _read_persistent_var($slice_control)
  declare $hide1
  declare $hide2
  declare $hide3
  declare $hide4
  declare $hide5
  declare $hide6
  declare $hide7
  declare $hide8
  declare ui_switch $remove_slice
  set_control_par_str(get_ui_id($remove_slice),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($remove_slice),$CONTROL_PAR_HELP,"Remove the current slice.")
  set_control_par_str(get_ui_id($remove_slice),$CONTROL_PAR_PICTURE,"remove1")
  set_control_par(get_ui_id($remove_slice),$CONTROL_PAR_WIDTH,100)
  set_control_par(get_ui_id($remove_slice),$CONTROL_PAR_HEIGHT,50)
  set_listener($NI_SIGNAL_TIMER_MS,50000)
  declare %stutterDiv[9]
  declare %jumpDiv[8]
  %jumpDiv[0] := %quantiseArray[$t-20]*4
  %jumpDiv[1] := %quantiseArrayTriplet[$t-20]*4
  %jumpDiv[2] := %quantiseArray[$t-20]*2
  %jumpDiv[3] := %quantiseArrayTriplet[$t-20]*2
  %jumpDiv[4] := %quantiseArray[$t-20]
  %jumpDiv[5] := %quantiseArrayTriplet[$t-20]
  %jumpDiv[6] := %quantiseArray[$t-20]*3
  %jumpDiv[7] := %quantiseArray[$t-20]/2
  declare ui_button $quantiseAll
  move_control_px($remove_slice,6,108)
  move_control_px($quantiseSlice,20,174)
  move_control_px($quantiseAll,20,153)
  move_control_px($tabA,485,108)
  move_control_px($tabB,520,108)
  set_control_par(get_ui_id($tabA),$CONTROL_PAR_WIDTH,100)
  set_control_par(get_ui_id($tabA),$CONTROL_PAR_HEIGHT,50)
  set_control_par(get_ui_id($tabB),$CONTROL_PAR_WIDTH,100)
  set_control_par(get_ui_id($tabB),$CONTROL_PAR_HEIGHT,50)
  set_control_par_str(get_ui_id($quantiseAll),$CONTROL_PAR_TEXT,"")
  set_control_par_str(get_ui_id($quantiseAll),$CONTROL_PAR_HELP,"Quantise all the slices")
  set_control_par_str(get_ui_id($quantiseAll),$CONTROL_PAR_PICTURE,"quan1")
  set_control_par(get_ui_id($quantiseAll),$CONTROL_PAR_HEIGHT,15)
  set_control_par(get_ui_id($quantiseAll),$CONTROL_PAR_WIDTH,15)
  set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,$quantiseSelect)
  set_control_par(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE_STATE,$loopMode)
  if ($sync=0)
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,1)
  else
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,0)
  end if
  if ($oneShot=0)
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,0)
  else
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,1)
  end if
  if ($loopMode=0)
    hide_part($tabB,$HIDE_WHOLE_CONTROL)
  else
    hide_part($tabB,$HIDE_PART_NOTHING)
  end if
  declare ui_button $test
  move_control($test,2,5)
  hide_part($test,$HIDE_WHOLE_CONTROL)
  $sliceDrop := 0
  $FXDrop := 0
  set_control_par(%volAux[0],$CONTROL_PAR_VALUE,%vol_state[0])
  set_control_par(%volAux[1],$CONTROL_PAR_VALUE,%attack_state[0])
  set_control_par(%volAux[2],$CONTROL_PAR_VALUE,%decay_state[0])
  $currentAux := 0
end on

function wait_time
  if ($sync=1)
    $newWait := %quantiseArray[$t-20]/4
  else
    $newWait := $DURATION_SIXTEENTH/4
  end if
  $gridLength := $wait/$originalTempo
  $ratio := $newWait*1000/$originalTempo
  $modWait := $wait mod $originalTempo/100*$ratio/10
  $wait := $newWait*$gridLength+$modWait
end function

function slice_play
  if (%slice_state[%slice_index[$loopNote]]=0)
    $groupAllow := 0
  else
    $groupAllow := 1
  end if
  if (%update_slice[%slice_index[$loopNote]]=1)
    if ($groupAllow=0)
      $startPoint := %slice_id[%slice_index[$loopNote]]
      if ($maxLoop=0)
        $wait := $sample_length
      else
        if ($loopNote-$playMod=0)
          $wait := %slice_id[%slice_index[$loopNote+1]]
        else
          if ($loopNote-$playMod=$maxLoop)
            $wait := $sample_length-%slice_id[%slice_index[$loopNote]]
          else
            $wait := %slice_id[%slice_index[$loopNote+1]]-%slice_id[%slice_index[$loopNote]]
          end if
        end if
      end if
    else
      if ($maxLoop=0)
        $wait := $sample_length
        $startPoint := $sample_length
      else
        if ($loopNote-$playMod=$maxLoop)
          $startPoint := $sample_length
          $wait := $sample_length-%slice_id[%slice_index[$loopNote]]
        else
          $startPoint := $sample_length-%slice_id[%slice_index[$loopNote+1]]
          $wait := %slice_id[%slice_index[$loopNote+1]]-%slice_id[%slice_index[$loopNote]]
        end if
      end if
    end if
    call wait_time
    %wait_times[%slice_index[$loopNote]] := $wait
    %start_points[%slice_index[$loopNote]] := $startPoint
    %update_slice[%slice_index[$loopNote]] := 0
  end if
end function

function slice_position2
  if ($current_slice # 0 and ($current_slice # 8))
    if (%slice_count[$current_slice]=($num_slices+$tabMod))
      $nextSlice := $sample_length-$currentQuantise
    else
      $nextSlice := %slice_id[%slice_index[%slice_count[$current_slice]+1]]-$currentQuantise
    end if
    $sliceBefore := %slice_id[%slice_index[%slice_count[$current_slice]-1]]+$currentQuantise
    $slicePos := %slice_id[$current_slice]
  end if
end function

function alter_grid_down
  set_control_par(%reverse_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%vol_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%lofi_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%pitch_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%pan_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%stutter_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%jump_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%filter_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%verb_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(%delay_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  if (%slice_count[$current_slice]-$tabMod # $num_slices)
    $count := %slice_count[$previous_slice]-$tabMod
    while ($count<$num_slices)
      set_control_par(%reverse_id[$count],$CONTROL_PAR_VALUE,get_control_par(%reverse_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%vol_id[$count],$CONTROL_PAR_VALUE,get_control_par(%vol_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%lofi_id[$count],$CONTROL_PAR_VALUE,get_control_par(%lofi_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%pitch_id[$count],$CONTROL_PAR_VALUE,get_control_par(%pitch_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,get_control_par(%pan_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%stutter_id[$count],$CONTROL_PAR_VALUE,get_control_par(%stutter_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%jump_id[$count],$CONTROL_PAR_VALUE,get_control_par(%jump_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%filter_id[$count],$CONTROL_PAR_VALUE,get_control_par(%filter_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%verb_id[$count],$CONTROL_PAR_VALUE,get_control_par(%verb_id[$count+1],$CONTROL_PAR_VALUE))
      set_control_par(%delay_id[$count],$CONTROL_PAR_VALUE,get_control_par(%delay_id[$count+1],$CONTROL_PAR_VALUE))
      if (get_control_par(%reverse_id[$count+1],$CONTROL_PAR_VALUE)=1)
        set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow2")
      else
        set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow1")
      end if
      inc($count)
    end while
  end if
  set_menu_item_visibility(get_ui_id($sliceDrop),$num_slices+$tabMod,0)
  if ($tabMod=0)
    set_key_color($num_slices+60,$KEY_COLOR_WHITE)
  else
    set_key_color($num_slices+68,$KEY_COLOR_WHITE)
  end if
end function

function reverse_send
  if (%slice_state[$current_slice]=1)
    set_control_par_str(%reverse_id[$selected],$CONTROL_PAR_PICTURE,"ReverseArrow2")
  else
    set_control_par_str(%reverse_id[$selected],$CONTROL_PAR_PICTURE,"ReverseArrow1")
  end if
end function

function show_vol
  $count := 0
  while ($count<3)
    if ($auxMod=0)
      set_control_par(%volAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%volAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
    inc($count)
  end while
end function

function show_pitch
  if ($auxMod=0)
    set_control_par(get_ui_id($aPitch),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  else
    set_control_par(get_ui_id($aPitch),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  end if
end function

function show_pan
  $count := 0
  while ($count<2)
    if ($auxMod=0)
      set_control_par(%panAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%panAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
    inc($count)
  end while
end function

function show_filter
  $count := 0
  while ($count<7)
    if ($auxMod=0)
      set_control_par(%filterAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%filterAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
    inc($count)
  end while
end function

function show_lofi
  $count := 0
  while ($count<2)
    if ($auxMod=0)
      set_control_par(%lofiAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%lofiAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
    inc($count)
  end while
end function

function show_sends
  $count := 0
  while ($count<7)
    if ($count # 2)
      if ($auxMod=0)
        set_control_par(%sendAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        hide_part($reverbBox,$HIDE_WHOLE_CONTROL)
      else
        set_control_par(%sendAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
        hide_part($reverbBox,$HIDE_PART_NOTHING)
      end if
    end if
    inc($count)
  end while
  $count := 0
  while ($count<9)
    if ($auxMod=1)
      if ($count=$category_reverb)
        set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
        set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      else
        set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      end if
    else
      set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      if ($count=0)
        set_control_par(get_ui_id($category_reverb),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      end if
    end if
    inc($count)
  end while
end function

function show_glitch
  $count := 0
  while ($count<4)
    if ($auxMod=0)
      set_control_par(%glitchAux[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    else
      set_control_par(%glitchAux[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    end if
    inc($count)
  end while
end function

function show_aux
  $auxMod := 0
  select ($previousAux)
    case 0
      call show_vol
    case 1
      call show_pitch
    case 2
      call show_pan
    case 3
      call show_filter
    case 4
      call show_lofi
    case 5
      call show_sends
    case 6
      call show_glitch
  end select
  $auxMod := 1
  select ($currentAux)
    case 0
      call show_vol
    case 1
      call show_pitch
    case 2
      call show_pan
    case 3
      call show_filter
    case 4
      call show_lofi
    case 5
      call show_sends
    case 6
      call show_glitch
  end select
  $FXDrop := $currentAux
  set_control_par($tabPic_id,$CONTROL_PAR_PICTURE_STATE,$currentAux)
end function

function set_volAux
  set_control_par(%volAux[0],$CONTROL_PAR_VALUE,%vol_state[$current_slice])
  set_control_par(%volAux[1],$CONTROL_PAR_VALUE,%attack_state[$current_slice])
  set_control_par(%volAux[2],$CONTROL_PAR_VALUE,%decay_state[$current_slice])
end function

function set_highlight
  message("")
  if ($current_slice=$tabMod and ($num_slices=0))
    set_control_par($highlight_id,$CONTROL_PAR_WIDTH,$wave_length)
    set_control_par($highlight_id,$CONTROL_PAR_POS_X,$wave_start)
  else
    if ($current_slice=$tabMod and ($num_slices>0))
      $width1 := %slice_id[%slice_index[$tabMod+1]]/$pixelLength
      set_control_par($highlight_id,$CONTROL_PAR_WIDTH,$width1+3)
      set_control_par($highlight_id,$CONTROL_PAR_POS_X,$wave_start)
    else
      if (%slice_count[$current_slice]-$tabMod=$num_slices)
        $width1 := 608-(%slice_id[$current_slice]/$pixelLength)
        $position := %slice_id[$current_slice]/$pixelLength
        if ($position>375)
          $position := $position-5
        end if
        set_control_par($highlight_id,$CONTROL_PAR_WIDTH,$width1)
        set_control_par($highlight_id,$CONTROL_PAR_POS_X,$wave_start+$position)
      else
        if (%slice_count[$current_slice]-$tabMod>0 and (%slice_count[$current_slice]-$tabMod<$num_slices))
          $width1 := %slice_id[%slice_index[%slice_count[$current_slice]+1]]/$pixelLength-(%slice_id[$current_slice]/$pixelLength)
          $position := %slice_id[$current_slice]/$pixelLength
          set_control_par($highlight_id,$CONTROL_PAR_WIDTH,$width1+4)
          set_control_par($highlight_id,$CONTROL_PAR_POS_X,$wave_start+$position-3)
        end if
      end if
    end if
  end if
end function

function grid_highlight
  if (%slice_count[$current_slice] # $gridSlice)
    $gridSlice := %slice_count[$current_slice]
    $count := 0
    $gridY := 261
    set_control_par($gridHighlight_id,$CONTROL_PAR_POS_Y,$gridY+(($gridSlice-$tabMod)*$ydistance))
    $sliceDrop := $gridSlice
  end if
  call set_highlight
  if ($tabMod=0)
    set_control_par($gridHighlight_id,$CONTROL_PAR_PICTURE_STATE,$gridAux)
  else
    set_control_par($gridHighlight_id,$CONTROL_PAR_PICTURE_STATE,$gridAux+9)
  end if
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
end function

function vol_send
  if ($currentAux # 0)
    $previousAux := $currentAux
    $currentAux := 0
    $previousGrid := $gridAux
    $gridAux := 0
    call grid_highlight
    call show_aux
  else
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_volAux
    call grid_highlight
    call set_highlight
  end if
  if ($bypassAll=0)
    set_engine_par($ENGINE_PAR_VOLUME,%vol_state[$current_slice],-1,-1,$NI_BUS_OFFSET+$current_slice)
  end if
  set_control_par(%volAux[0],$CONTROL_PAR_VALUE,%vol_state[$current_slice])
end function

function attack_send
  $index := find_target($current_slice,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_ATTACK,%attack_state[$current_slice],$current_slice,0,$index)
  $index := find_target($current_slice+$maxSlices,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_ATTACK,%attack_state[$current_slice],$current_slice+$maxSlices,0,$index)
  $index := find_target($current_slice+32,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_ATTACK,%attack_state[$current_slice],$current_slice+32,0,$index)
  $index := find_target($current_slice+$maxSlices+32,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_ATTACK,%attack_state[$current_slice],$current_slice+$maxSlices+32,0,$index)
end function

function decay_send
  $index := find_target($current_slice,0,"ENV_VOL")
  $index2 := find_target($current_slice+$maxSlices,0,"ENV_VOL")
  $index3 := find_target($current_slice+32,0,"ENV_VOL")
  $index4 := find_target($current_slice+$maxSlices+32,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_DECAY,%decay_state[$current_slice],$current_slice,0,$index)
  set_engine_par($ENGINE_PAR_DECAY,%decay_state[$current_slice],$current_slice+$maxSlices,0,$index2)
  set_engine_par($ENGINE_PAR_DECAY,%decay_state[$current_slice],$current_slice+32,0,$index3)
  set_engine_par($ENGINE_PAR_DECAY,%decay_state[$current_slice],$current_slice+$maxSlices+32,0,$index4)
  if (%decay_state[$current_slice]<1000000)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice,0,$index)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices,0,$index2)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+32,0,$index3)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices+32,0,$index4)
  else
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice,0,$index)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices,0,$index2)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+32,0,$index3)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices+32,0,$index4)
  end if
end function

function set_pitchAux
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_VALUE,%pitch_state[$current_slice])
end function

function pitch_send
  select (%pitch_state[$current_slice])
    case 0
      $pitchMod := 416667
    case 1
      $pitchMod := 430556
    case 2
      $pitchMod := 444444
    case 3
      $pitchMod := 458333
    case 4
      $pitchMod := 472222
    case 5
      $pitchMod := 486111
    case 6
      $pitchMod := 500000
    case 7
      $pitchMod := 513899
    case 8
      $pitchMod := 527778
    case 9
      $pitchMod := 541667
    case 10
      $pitchMod := 555556
    case 11
      $pitchMod := 569444
    case 12
      $pitchMod := 583333
  end select
  if ($currentAux # 1)
    $previousAux := $currentAux
    $currentAux := 1
    $previousGrid := $gridAux
    $gridAux := 1
    call show_aux
    call grid_highlight
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_pitchAux
    call grid_highlight
    call set_highlight
  end if
  if ($bypassAll=0)
    set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$current_slice,-1,-1)
    set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$current_slice+$maxSlices,-1,-1)
    set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$current_slice+32,-1,-1)
    set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$current_slice+$maxSlices+32,-1,-1)
  end if
  set_control_par(get_ui_id($aPitch),$CONTROL_PAR_VALUE,%pitch_state[$current_slice])
end function

function set_panAux
  set_control_par(%panAux[0],$CONTROL_PAR_VALUE,%pan_state[$current_slice])
  set_control_par(%panAux[1],$CONTROL_PAR_VALUE,%auto_state[$current_slice])
end function

function pan_send
  if ($currentAux # 2)
    $previousAux := $currentAux
    $currentAux := 2
    $previousGrid := $gridAux
    $gridAux := 2
    call show_aux
    call grid_highlight
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_panAux
    call grid_highlight
    call set_highlight
  end if
  if ($bypassAll=0)
    set_engine_par($ENGINE_PAR_PAN,%pan_state[$current_slice],-1,-1,$NI_BUS_OFFSET+$current_slice)
  end if
  set_control_par(%panAux[0],$CONTROL_PAR_VALUE,%pan_state[$current_slice])
end function

function set_filterAux
  set_control_par(%filterAux[0],$CONTROL_PAR_VALUE,%filter_state[$current_slice])
  set_control_par(%filterAux[1],$CONTROL_PAR_VALUE,%reso_state[$current_slice])
  set_control_par(%filterAux[2],$CONTROL_PAR_VALUE,%fAttack_state[$current_slice])
  set_control_par(%filterAux[3],$CONTROL_PAR_VALUE,%fDecay_state[$current_slice])
  set_control_par(%filterAux[4],$CONTROL_PAR_VALUE,%wave_state[$current_slice])
  set_control_par(%filterAux[5],$CONTROL_PAR_VALUE,%freq_state[$current_slice])
  set_control_par(%filterAux[6],$CONTROL_PAR_VALUE,%amt_state[$current_slice])
end function

function filter_send
  if ($currentAux # 3)
    $previousAux := $currentAux
    $currentAux := 3
    $previousGrid := $gridAux
    $gridAux := 3
    call grid_highlight
    call show_aux
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_filterAux
    call grid_highlight
    call set_highlight
  end if
  set_engine_par($ENGINE_PAR_CUTOFF,%filter_state[$current_slice],$current_slice,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,%filter_state[$current_slice],$current_slice+$maxSlices,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,%filter_state[$current_slice],$current_slice+32,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,%filter_state[$current_slice],$current_slice+$maxSlices+32,0,-1)
  set_control_par(%filterAux[0],$CONTROL_PAR_VALUE,%filter_state[$current_slice])
end function

function reso_send
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+$maxSlices,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+32,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+$maxSlices+32,0,-1)
end function

function fAttack_send
  $index := find_target($current_slice,1,"ENV_FILTER")
  $index2 := find_target($current_slice+$maxSlices,1,"ENV_FILTER")
  $index3 := find_target($current_slice+32,1,"ENV_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,1,"ENV_FILTER")
  set_engine_par($ENGINE_PAR_ATTACK,%fAttack_state[$current_slice],$current_slice,1,$index)
  set_engine_par($ENGINE_PAR_ATTACK,%fAttack_state[$current_slice],$current_slice+$maxSlices,1,$index2)
  set_engine_par($ENGINE_PAR_ATTACK,%fAttack_state[$current_slice],$current_slice+32,1,$index3)
  set_engine_par($ENGINE_PAR_ATTACK,%fAttack_state[$current_slice],$current_slice+$maxSlices+32,1,$index4)
end function

function fDecay_send
  $index := find_target($current_slice,1,"ENV_FILTER")
  $index2 := find_target($current_slice+$maxSlices,1,"ENV_FILTER")
  $index3 := find_target($current_slice+32,1,"ENV_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,1,"ENV_FILTER")
  set_engine_par($ENGINE_PAR_DECAY,%fDecay_state[$current_slice],$current_slice,1,$index)
  set_engine_par($ENGINE_PAR_DECAY,%fDecay_state[$current_slice],$current_slice+$maxSlices,1,$index2)
  set_engine_par($ENGINE_PAR_DECAY,%fDecay_state[$current_slice],$current_slice+32,1,$index3)
  set_engine_par($ENGINE_PAR_DECAY,%fDecay_state[$current_slice],$current_slice+$maxSlices+32,1,$index4)
  if (%fDecay_state[$current_slice]<1000000)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice,1,$index)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices,1,$index2)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+32,1,$index3)
    set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices+32,1,$index4)
  else
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice,1,$index)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices,1,$index2)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+32,1,$index3)
    set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices+32,1,$index4)
  end if
end function

function wave_send
  $index := find_target($current_slice,2,"LFO_FILTER")
  $index2 := find_target($current_slice+$maxSlices,2,"LFO_FILTER")
  $index3 := find_target($current_slice+32,2,"LFO_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,2,"LFO_FILTER")
  select (%wave_state[$current_slice])
    case 0
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices+32,2,$index4)
    case 1
      set_engine_par($ENGINE_PAR_LFO_TRI,1000000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_TRI,1000000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_TRI,1000000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_TRI,1000000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices+32,2,$index4)
    case 2
      set_engine_par($ENGINE_PAR_LFO_RECT,1000000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_RECT,1000000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_RECT,1000000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_RECT,1000000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices+32,2,$index4)
    case 3
      set_engine_par($ENGINE_PAR_LFO_SAW,1000000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SAW,1000000,$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SAW,1000000,$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SINE,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_SAW,1000000,$current_slice+$maxSlices+32,2,$index4)
  end select
end function

function freq_send
  $index := find_target($current_slice,2,"LFO_FILTER")
  $index2 := find_target($current_slice+$maxSlices,2,"LFO_FILTER")
  $index3 := find_target($current_slice+32,2,"LFO_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,2,"LFO_FILTER")
  select (%freq_state[$current_slice])
    case 0
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 1
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 2
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 3
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 4
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 5
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 6
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
    case 7
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$current_slice,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$current_slice+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
  end select
end function

function amt_send
  $index := find_target($current_slice,2,"LFO_FILTER")
  $index2 := find_target($current_slice+$maxSlices,2,"LFO_FILTER")
  $index3 := find_target($current_slice+32,2,"LFO_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,2,"LFO_FILTER")
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,%amt_state[$current_slice],$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,%amt_state[$current_slice],$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,%amt_state[$current_slice],$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,%amt_state[$current_slice],$current_slice+$maxSlices+32,2,$index4)
end function

function set_lofiAux
  set_control_par(%lofiAux[0],$CONTROL_PAR_VALUE,1000000-%lofi_state[$current_slice])
  set_control_par(%lofiAux[1],$CONTROL_PAR_VALUE,%bit_state[$current_slice])
end function

function lofi_send
  if ($currentAux # 4)
    $previousAux := $currentAux
    $currentAux := 4
    $previousGrid := $gridAux
    $gridAux := 4
    call grid_highlight
    call show_aux
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_lofiAux
    call grid_highlight
    call set_highlight
  end if
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000-%lofi_state[$current_slice],$current_slice,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000-%lofi_state[$current_slice],$current_slice+$maxSlices,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000-%lofi_state[$current_slice],$current_slice+32,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000-%lofi_state[$current_slice],$current_slice+$maxSlices+32,1,-1)
  set_control_par(%lofiAux[0],$CONTROL_PAR_VALUE,1000000-%lofi_state[$current_slice])
end function

function bit_send
  set_engine_par($ENGINE_PAR_BITS,%bit_state[$current_slice],$current_slice,1,-1)
  set_engine_par($ENGINE_PAR_BITS,%bit_state[$current_slice],$current_slice+$maxSlices,1,-1)
  set_engine_par($ENGINE_PAR_BITS,%bit_state[$current_slice],$current_slice+32,1,-1)
  set_engine_par($ENGINE_PAR_BITS,%bit_state[$current_slice],$current_slice+$maxSlices+32,1,-1)
end function

function set_sendsAux
  set_control_par(%sendAux[0],$CONTROL_PAR_VALUE,%verb_state[$current_slice])
  set_control_par(%sendAux[3],$CONTROL_PAR_VALUE,%delay_state[$current_slice])
end function

function verb_send
  if ($currentAux # 5)
    $previousAux := $currentAux
    $currentAux := 5
    call show_aux
    call grid_highlight
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_sendsAux
    call grid_highlight
    call set_highlight
  end if
  if ($gridAux # 5)
    $previousGrid := $gridAux
    $gridAux := 5
    call grid_highlight
  end if
  set_engine_par($ENGINE_PAR_SENDLEVEL_1,%verb_state[$current_slice],-1,0,$NI_BUS_OFFSET+$current_slice)
  set_control_par(%sendAux[0],$CONTROL_PAR_VALUE,%verb_state[$current_slice])
end function

function delay_send
  if ($currentAux # 5)
    $previousAux := $currentAux
    $currentAux := 5
    call show_aux
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_sendsAux
    call grid_highlight
    call set_highlight
  end if
  if ($gridAux # 6)
    $previousGrid := $gridAux
    $gridAux := 6
    call grid_highlight
  end if
  set_engine_par($ENGINE_PAR_SENDLEVEL_0,%delay_state[$current_slice],-1,0,$NI_BUS_OFFSET+$current_slice)
  set_control_par(%sendAux[3],$CONTROL_PAR_VALUE,%delay_state[$current_slice])
end function

function set_glitchAux
  set_control_par(%glitchAux[0],$CONTROL_PAR_VALUE,%stutter_state[$current_slice])
  set_control_par(%glitchAux[1],$CONTROL_PAR_VALUE,%jump_state[$current_slice])
  set_control_par(%glitchAux[2],$CONTROL_PAR_VALUE,%jumpD_state[$current_slice])
  set_control_par(%glitchAux[3],$CONTROL_PAR_VALUE,%jumpGap_state[$current_slice])
end function

function glitch_send
  if ($currentAux # 6)
    $previousAux := $currentAux
    $currentAux := 6
    call grid_highlight
    call show_aux
  end if
  if ($current_slice # $auxSlice)
    $auxSlice := $current_slice
    call set_glitchAux
    call grid_highlight
    call set_highlight
  end if
  if ($gridAux # $currentGlitch)
    $previousGrid := $gridAux
    $gridAux := $currentGlitch
    call grid_highlight
  end if
  set_control_par(%glitchAux[0],$CONTROL_PAR_VALUE,%stutter_state[$current_slice])
  set_control_par(%glitchAux[1],$CONTROL_PAR_VALUE,%jump_state[$current_slice])
end function

function check_slice
  if (%slice_count[$current_slice]-$tabMod=$num_slices)
    $nextSlice := $sample_length
  else
    $nextSlice := %slice_id[%slice_index[%slice_count[$current_slice]+1]]
  end if
  if (%slice_count[$current_slice]-$tabMod=0)
    $sliceBefore := 0
  else
    $sliceBefore := %slice_id[%slice_index[%slice_count[$current_slice]-1]]
  end if
  if ($nextSlice<($checkSlice+$currentQuantise) or ($sliceBefore>($checkSlice-$currentQuantise)))
    $sliceDone := 0
  else
    $sliceDone := 1
  end if
end function

function move_slice
  if ($slice_control<=$picLength)
    if ($hide1=0)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      $hide1 := 1
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide2 := 0
    end if
    $pic1 := $slice_control
  end if
  if ($slice_control<=($picLength*2) and ($slice_control>$picLength))
    if ($hide2=0)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide2 := 1
      $hide1 := 0
      $hide3 := 0
    end if
    $pic2 := $slice_control-$picLength
  end if
  if ($slice_control<=($picLength*3) and ($slice_control>($picLength*2)))
    if ($hide3=0)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide3 := 1
      $hide2 := 0
      $hide4 := 0
    end if
    $pic3 := $slice_control-($picLength*2)
  end if
  if ($slice_control<=($picLength*4) and ($slice_control>($picLength*3)))
    if ($hide4=0)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide4 := 1
      $hide5 := 0
      $hide3 := 0
    end if
    $pic4 := $slice_control-($picLength*3)
  end if
  if ($slice_control<=($picLength*5) and ($slice_control>($picLength*4)))
    if ($hide5=0)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide5 := 1
      $hide4 := 0
      $hide6 := 0
    end if
    $pic5 := $slice_control-($picLength*4)
  end if
  if ($slice_control<=($picLength*6) and ($slice_control>($picLength*5)))
    if ($hide6=0)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide6 := 1
      $hide5 := 0
      $hide7 := 0
    end if
    $pic6 := $slice_control-($picLength*5)
  end if
  if ($slice_control<=($picLength*7) and ($slice_control>($picLength*6)))
    if ($hide7=0)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide6 := 0
      $hide7 := 1
      $hide8 := 0
    end if
    $pic7 := $slice_control-($picLength*6)
  end if
  if ($slice_control<=($picLength*8) and ($slice_control>($picLength*7)))
    if ($hide8=0)
      set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      $hide8 := 1
      $hide7 := 0
    end if
    $pic8 := $slice_control-($picLength*7)
  end if
end function

function quantise_slice
  if ($num_slices>0 or ($current_slice # 0))
    select ($quantiseSelect)
      case 0
        $qSize := $currentQuantise*4
      case 1
        $qSize := $currentQuantiseTriplet*4
      case 2
        $qSize := $currentQuantise*2
      case 3
        $qSize := $currentQuantiseTriplet*2
      case 4
        $qSize := $currentQuantise
      case 5
        $qSize := $currentQuantiseTriplet
    end select
    $sliceMod := %slice_id[$current_slice] mod $qSize
    if ($sliceMod>($qSize/2))
      $checkSlice := %slice_id[$current_slice]/$qSize*$qSize+$qSize
    else
      $checkSlice := %slice_id[$current_slice]/$qSize*$qSize
    end if
    call check_slice
    if ($sliceDone=1)
      %slice_id[$current_slice] := $checkSlice
      $slice_control := %slice_id[$current_slice]
      call move_slice
      %update_slice[$current_slice] := 1
      %update_slice[%slice_index[%slice_count[$current_slice]-1]] := 1
    end if
  end if
end function

function quantise_all
  if ($num_slices>0)
    $count := 0
    select ($quantiseSelect)
      case 0
        $qSize := $currentQuantise*4
      case 1
        $qSize := $currentQuantiseTriplet*4
      case 2
        $qSize := $currentQuantise*2
      case 3
        $qSize := $currentQuantiseTriplet*2
      case 4
        $qSize := $currentQuantise
      case 5
        $qSize := $currentQuantiseTriplet
    end select
    while ($count<($maxslices/2))
      if (%slice_count[$count+$tabMod]>0)
        $current_slice := $count+$tabMod
        $sliceMod := %slice_id[$count+$tabMod] mod $qSize
        if ($sliceMod>($qSize/2))
          $checkSlice := %slice_id[$count+$tabMod]/$qSize*$qSize+$qSize
        else
          $checkSlice := %slice_id[$count+$tabMod]/$qSize*$qSize
        end if
        call check_slice
        if ($sliceDone=1)
          %slice_id[$count+$tabMod] := $checkSlice
        end if
        if (%slice_id[$count+$tabMod]/$pixelLength>532)
          $blueMod := 10
        else
          $blueMod := 6
        end if
        set_control_par(%slicePic_id[$count],$CONTROL_PAR_POS_X,$wave_start+(%slice_id[$count+$tabMod]/$pixelLength)-$blueMod)
        set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      end if
      inc($count)
    end while
    $current_slice := $tabMod
    $previous_slice := $tabMod
    set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(get_ui_id($slice_control),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    $hide1 := 0
    $hide2 := 0
    $hide3 := 0
    $hide4 := 0
    $hide5 := 0
    $hide6 := 0
    $hide7 := 0
    $hide8 := 0
  end if
end function

function set_aux
  select ($currentAux)
    case 0
      call set_volAux
    case 1
      call set_pitchAux
    case 2
      call set_panAux
    case 3
      call set_filterAux
    case 4
      call set_lofiAux
    case 5
      call set_sendsAux
    case 6
      call set_glitchAux
  end select
end function

function blue_slice
  if (%slice_id[$previous_slice]/$pixelLength>532)
    $blueMod := 10
  else
    $blueMod := 6
  end if
  if ($num_slices>0)
    set_control_par(%slicePic_id[$previous_slice-$tabMod],$CONTROL_PAR_POS_X,$wave_start+(%slice_id[$previous_slice]/$pixelLength)-$blueMod)
    set_control_par(%slicePic_id[$previous_slice-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  end if
  set_control_par(%slicePic_id[$current_slice-$tabMod],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  call set_aux
  call grid_highlight
end function

function index_slices
  if ($tabbed=0)
    %slice_index[0] := search(%slice_count,0)
    %slice_index[1] := search(%slice_count,1)
    %slice_index[2] := search(%slice_count,2)
    %slice_index[3] := search(%slice_count,3)
    %slice_index[4] := search(%slice_count,4)
    %slice_index[5] := search(%slice_count,5)
    %slice_index[6] := search(%slice_count,6)
    %slice_index[7] := search(%slice_count,7)
  else
    %slice_index[8] := search(%slice_count,8)
    %slice_index[9] := search(%slice_count,9)
    %slice_index[10] := search(%slice_count,10)
    %slice_index[11] := search(%slice_count,11)
    %slice_index[12] := search(%slice_count,12)
    %slice_index[13] := search(%slice_count,13)
    %slice_index[14] := search(%slice_count,14)
    %slice_index[15] := search(%slice_count,15)
  end if
end function

function slice_position
  if ($current_slice # 0 and ($current_slice # 8))
    if (%slice_count[$current_slice]=($num_slices+$tabMod))
      $nextSlice := $sample_length
    else
      $nextSlice := %slice_id[%slice_index[%slice_count[$current_slice]+1]]
    end if
    $sliceBefore := %slice_id[%slice_index[%slice_count[$current_slice]-1]]
    $slicePos := %slice_id[$current_slice]
    if ($slicePos>$nextSlice)
      dec(%slice_count[%slice_index[%slice_count[$current_slice]+1]])
      inc(%slice_count[$current_slice])
      call index_slices
    else
      if ($slicePos<$sliceBefore)
        inc(%slice_count[%slice_index[%slice_count[$current_slice]-1]])
        dec(%slice_count[$current_slice])
        call index_slices
      end if
    end if
  end if
end function

function slice_pic
  $slice_control := %slice_id[$current_slice]
  $hide1 := 0
  $hide2 := 0
  $hide3 := 0
  $hide4 := 0
  $hide5 := 0
  $hide6 := 0
  $hide7 := 0
  $hide8 := 0
  call move_slice
  call blue_slice
  call slice_position
  if ($current_slice # 0 or ($current_slice # 8))
    set_control_par(get_ui_id($slice_control),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  end if
end function

function reset_slice
  set_engine_par($ENGINE_PAR_VOLUME,500000,-1,-1,$NI_BUS_OFFSET+$current_slice)
  set_engine_par($ENGINE_PAR_PAN,500000,-1,-1,$NI_BUS_OFFSET+$current_slice)
  set_engine_par($ENGINE_PAR_SENDLEVEL_1,0,-1,0,$NI_BUS_OFFSET+$current_slice)
  set_engine_par($ENGINE_PAR_SENDLEVEL_0,0,-1,0,$NI_BUS_OFFSET+$current_slice)
  set_engine_par($ENGINE_PAR_TUNE,500000,$current_slice,-1,-1)
  set_engine_par($ENGINE_PAR_TUNE,500000,$current_slice+$maxSlices,-1,-1)
  set_engine_par($ENGINE_PAR_TUNE,500000,$current_slice+32,-1,-1)
  set_engine_par($ENGINE_PAR_TUNE,500000,$current_slice+$maxSlices+32,-1,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+$maxSlices,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+32,0,-1)
  set_engine_par($ENGINE_PAR_RESONANCE,%reso_state[$current_slice],$current_slice+$maxSlices+32,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,1000000,$current_slice,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,1000000,$current_slice+$maxSlices,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,1000000,$current_slice+32,0,-1)
  set_engine_par($ENGINE_PAR_CUTOFF,1000000,$current_slice+$maxslices+32,0,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$current_slice,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$current_slice+$maxSlices,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$current_slice+32,1,-1)
  set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$current_slice+$maxslices+32,1,-1)
  set_engine_par($ENGINE_PAR_BITS,1000000,$current_slice,1,-1)
  set_engine_par($ENGINE_PAR_BITS,1000000,$current_slice+$maxSlices,1,-1)
  set_engine_par($ENGINE_PAR_BITS,1000000,$current_slice+32,1,-1)
  set_engine_par($ENGINE_PAR_BITS,1000000,$current_slice+$maxSlices+32,1,-1)
  $index := find_target($current_slice,1,"ENV_FILTER")
  $index2 := find_target($current_slice+$maxSlices,1,"ENV_FILTER")
  $index3 := find_target($current_slice+32,1,"ENV_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,1,"ENV_FILTER")
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice,1,$index)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+$maxSlices,1,$index2)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+32,1,$index3)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+$maxSlices+32,1,$index4)
  set_engine_par($ENGINE_PAR_DECAY,0,$current_slice,1,$index)
  set_engine_par($ENGINE_PAR_DECAY,0,$current_slice+$maxSlices,1,$index2)
  set_engine_par($ENGINE_PAR_DECAY,0,$current_slice+32,1,$index3)
  set_engine_par($ENGINE_PAR_DECAY,0,$current_slice+$maxSlices+32,1,$index4)
  set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice,1,$index)
  set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices,1,$index2)
  set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+32,1,$index3)
  set_engine_par($ENGINE_PAR_SUSTAIN,0,$current_slice+$maxSlices+32,1,$index4)
  $index := find_target($current_slice,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_DECAY,1000000,$current_slice,0,$index)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice,0,$index)
  set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice,0,$index)
  $index := find_target($current_slice+$maxSlices,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_DECAY,1000000,$current_slice+$maxSlices,0,$index)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+$maxSlices,0,$index)
  set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices,0,$index)
  $index := find_target($current_slice+32,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_DECAY,1000000,$current_slice+32,0,$index)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+32,0,$index)
  set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+32,0,$index)
  $index := find_target($current_slice+$maxSlices+32,0,"ENV_VOL")
  set_engine_par($ENGINE_PAR_DECAY,1000000,$current_slice+$maxSlices+32,0,$index)
  set_engine_par($ENGINE_PAR_ATTACK,0,$current_slice+$maxSlices+32,0,$index)
  set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$current_slice+$maxSlices+32,0,$index)
  $index := find_target($current_slice,2,"LFO_FILTER")
  $index2 := find_target($current_slice+$maxSlices,2,"LFO_FILTER")
  $index3 := find_target($current_slice+32,2,"LFO_FILTER")
  $index4 := find_target($current_slice+$maxSlices+32,2,"LFO_FILTER")
  set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$current_slice+$maxSlices+32,2,$index4)
  set_engine_par($ENGINE_PAR_LFO_TRI,500000,$current_slice+$maxSlices+32,2,$index4)
  set_engine_par($ENGINE_PAR_LFO_RECT,500000,$current_slice+$maxSlices+32,2,$index4)
  set_engine_par($ENGINE_PAR_LFO_SAW,500000,$current_slice+$maxSlices+32,2,$index4)
  set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$current_slice+$maxSlices+32,2,$index4)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$current_slice,2,$index)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$current_slice+$maxSlices,2,$index2)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$current_slice+32,2,$index3)
  set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$current_slice+$maxSlices+32,2,$index4)
  set_control_par(%vol_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,500000)
  set_control_par(%lofi_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  set_control_par(%pitch_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,6)
  set_control_par(%pan_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,500000)
  set_control_par(%stutter_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  set_control_par(%jump_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  set_control_par(%filter_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,1000000)
  set_control_par(%verb_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  set_control_par(%delay_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  set_control_par_str(%reverse_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_PICTURE,"ReverseArrow1")
  set_control_par(%reverse_id[%slice_count[$current_slice]-$tabMod],$CONTROL_PAR_VALUE,0)
  %slice_state[$current_slice] := 0
  %vol_state[$current_slice] := 500000
  %lofi_state[$current_slice] := 0
  %pitch_state[$current_slice] := 6
  %pan_state[$current_slice] := 500000
  %stutter_state[$current_slice] := 0
  %jump_state[$current_slice] := 0
  %filter_state[$current_slice] := 1000000
  %verb_state[$current_slice] := 0
  %delay_state[$current_slice] := 0
  %attack_state[$current_slice] := 0
  %decay_state[$current_slice] := 1000000
  %auto_state[$current_slice] := 0
  %reso_state[$current_slice] := 0
  %fattack_state[$current_slice] := 0
  %fdecay_state[$current_slice] := 0
  %wave_state[$current_slice] := 0
  %amt_state[$current_slice] := 0
  %freq_state[$current_slice] := 0
  %bit_state[$current_slice] := 1000000
  %update_slice[$current_slice] := 1
  call set_aux
end function

function alter_grid_up
  set_control_par(%reverse_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%vol_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%lofi_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%pitch_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%pan_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%stutter_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%jump_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%filter_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%verb_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  set_control_par(%delay_id[$num_slices],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
  if (%slice_count[$current_slice]-$tabMod # $num_slices)
    $count := $num_slices
    while ($count>(%slice_count[$current_slice]-$tabMod))
      set_control_par(%reverse_id[$count],$CONTROL_PAR_VALUE,get_control_par(%reverse_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%vol_id[$count],$CONTROL_PAR_VALUE,get_control_par(%vol_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%lofi_id[$count],$CONTROL_PAR_VALUE,get_control_par(%lofi_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%pitch_id[$count],$CONTROL_PAR_VALUE,get_control_par(%pitch_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,get_control_par(%pan_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%stutter_id[$count],$CONTROL_PAR_VALUE,get_control_par(%stutter_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%jump_id[$count],$CONTROL_PAR_VALUE,get_control_par(%jump_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%filter_id[$count],$CONTROL_PAR_VALUE,get_control_par(%filter_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%verb_id[$count],$CONTROL_PAR_VALUE,get_control_par(%verb_id[$count-1],$CONTROL_PAR_VALUE))
      set_control_par(%delay_id[$count],$CONTROL_PAR_VALUE,get_control_par(%delay_id[$count-1],$CONTROL_PAR_VALUE))
      if (get_control_par(%reverse_id[$count-1],$CONTROL_PAR_VALUE)=1)
        set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow2")
      else
        set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow1")
      end if
      dec($count)
    end while
  end if
  call reset_slice
  set_menu_item_visibility(get_ui_id($sliceDrop),$num_slices+$tabMod,1)
  if ($tabMod=0)
    set_key_color($num_slices+60,$KEY_COLOR_YELLOW)
  else
    set_key_color($num_slices+68,$KEY_COLOR_BLUE)
  end if
end function

function add_slice
  if ($isOn=0)
    if ($num_slices<7)
      $count := 0
      $previous_slice := $newSlice*$currentQuantise
      $sliceDone := 0
      while ($count<($maxSlices/2))
        if (%slice_id[$count+$tabMod]<($previous_slice+$currentQuantise) and (%slice_id[$count+$tabMod]>($previous_slice-$currentQuantise)))
          $sliceDone := 1
        end if
        inc($count)
      end while
      if ($sliceDone=1)
        exit
      end if
      set_control_par(get_ui_id($slice_control),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      if ($tabbed=0)
        inc($tabAslices)
        $num_slices := $tabAslices
      else
        inc($tabBslices)
        $num_slices := $tabBslices
      end if
      $previous_slice := $current_slice
      $count := 0
      $sliceDone := 0
      while ($count<($maxSlices/2))
        if (%sliceNext[$count+$tabMod]=1 and ($sliceDone=0))
          $current_slice := $count+$tabMod
          %sliceNext[$count+$tabMod] := 0
          $sliceDone := 1
        end if
        inc($count)
      end while
      %slice_id[$current_slice] := $newSlice*$currentQuantise
      $count := 0
      $newSlice := $num_slices+$tabMod
      $sliceDone := 0
      while ($count<($maxSlices/2))
        if (%slice_id[$count+$tabMod]>%slice_id[$current_slice])
          if (%slice_count[$count+$tabMod]<$newSlice)
            $newSlice := %slice_count[$count+$tabMod]
          end if
          inc(%slice_count[$count+$tabMod])
        end if
        inc($count)
      end while
      %slice_count[$current_slice] := $newSlice
      call index_slices
      call slice_pic
      call alter_grid_up
      %update_slice[$current_slice] := 1
      %update_slice[%slice_index[%slice_count[$current_slice]-1]] := 1
      hide_part($highlight,$HIDE_WHOLE_CONTROL)
    end if
  end if
end function

function show_index
  message(%slice_index[0] & "  " & %slice_index[1] & "  " & %slice_index[2] & "  " & %slice_index[3] & "  " & %slice_index[4] & "  " & %slice_index[5] & "  " & %slice_index[6] & "  " & %slice_index[7] & "    " & %slice_index[8] & "  " & %slice_index[9] & "  " & %slice_index[10] & "  " & %slice_index[11] & "  " & %slice_index[12] & "  " & %slice_index[13] & "  " & %slice_index[14] & "  " & %slice_index[15])
end function

function reset_all
  if ($isOn=0)
    $count := 0
    while ($count<$maxSlices)
      set_engine_par($ENGINE_PAR_VOLUME,500000,-1,-1,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_PAN,500000,-1,-1,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_SENDLEVEL_1,0,-1,0,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_SENDLEVEL_0,0,-1,0,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+$maxSlices,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+32,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+$maxSlices+32,-1,-1)
      set_engine_par($ENGINE_PAR_RESONANCE,0,$count,0,-1)
      set_engine_par($ENGINE_PAR_RESONANCE,0,$count+$maxSlices,0,-1)
      set_engine_par($ENGINE_PAR_RESONANCE,0,$count+32,0,-1)
      set_engine_par($ENGINE_PAR_RESONANCE,0,$count+$maxSlices+32,0,-1)
      set_engine_par($ENGINE_PAR_CUTOFF,1000000,$count,0,-1)
      set_engine_par($ENGINE_PAR_CUTOFF,1000000,$count+$maxSlices,0,-1)
      set_engine_par($ENGINE_PAR_CUTOFF,1000000,$count+32,0,-1)
      set_engine_par($ENGINE_PAR_CUTOFF,1000000,$count+$maxslices+32,0,-1)
      set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$count,1,-1)
      set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$count+$maxSlices,1,-1)
      set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$count+32,1,-1)
      set_engine_par($ENGINE_PAR_FREQUENCY,1000000,$count+$maxslices+32,1,-1)
      set_engine_par($ENGINE_PAR_BITS,1000000,$count,1,-1)
      set_engine_par($ENGINE_PAR_BITS,1000000,$count+$maxSlices,1,-1)
      set_engine_par($ENGINE_PAR_BITS,1000000,$count+32,1,-1)
      set_engine_par($ENGINE_PAR_BITS,1000000,$count+$maxSlices+32,1,-1)
      $index := find_target($count,1,"ENV_FILTER")
      $index2 := find_target($count+$maxSlices,1,"ENV_FILTER")
      $index3 := find_target($count+32,1,"ENV_FILTER")
      $index4 := find_target($count+$maxSlices+32,1,"ENV_FILTER")
      set_engine_par($ENGINE_PAR_ATTACK,0,$count,1,$index)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+$maxSlices,1,$index2)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+32,1,$index3)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+$maxSlices+32,1,$index4)
      set_engine_par($ENGINE_PAR_DECAY,0,$count,1,$index)
      set_engine_par($ENGINE_PAR_DECAY,0,$count+$maxSlices,1,$index2)
      set_engine_par($ENGINE_PAR_DECAY,0,$count+32,1,$index3)
      set_engine_par($ENGINE_PAR_DECAY,0,$count+$maxSlices+32,1,$index4)
      set_engine_par($ENGINE_PAR_SUSTAIN,0,$count,1,$index)
      set_engine_par($ENGINE_PAR_SUSTAIN,0,$count+$maxSlices,1,$index2)
      set_engine_par($ENGINE_PAR_SUSTAIN,0,$count+32,1,$index3)
      set_engine_par($ENGINE_PAR_SUSTAIN,0,$count+$maxSlices+32,1,$index4)
      $index := find_target($count,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_DECAY,1000000,$count,0,$index)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count,0,$index)
      set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$count,0,$index)
      $index := find_target($count+$maxSlices,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_DECAY,1000000,$count+$maxSlices,0,$index)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+$maxSlices,0,$index)
      set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$count+$maxSlices,0,$index)
      $index := find_target($count+32,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_DECAY,1000000,$count+32,0,$index)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+32,0,$index)
      set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$count+32,0,$index)
      $index := find_target($count+$maxSlices+32,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_DECAY,1000000,$count+$maxSlices+32,0,$index)
      set_engine_par($ENGINE_PAR_ATTACK,0,$count+$maxSlices+32,0,$index)
      set_engine_par($ENGINE_PAR_SUSTAIN,1000000,$count+$maxSlices+32,0,$index)
      $index := find_target($count,2,"LFO_FILTER")
      $index2 := find_target($count+$maxSlices,2,"LFO_FILTER")
      $index3 := find_target($count+32,2,"LFO_FILTER")
      $index4 := find_target($count+$maxSlices+32,2,"LFO_FILTER")
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$count,2,$index)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$count,2,$index)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$count,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$count,2,$index)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_LFO_SINE,1000000,$count+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_TRI,500000,$count+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_RECT,500000,$count+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_LFO_SAW,500000,$count+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count,2,$index)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices+32,2,$index4)
      set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$count,2,$index)
      set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$count+$maxSlices,2,$index2)
      set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$count+32,2,$index3)
      set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,0,$count+$maxSlices+32,2,$index4)
      if ($count<8)
        set_control_par(%vol_id[$count],$CONTROL_PAR_VALUE,500000)
        set_control_par(%lofi_id[$count],$CONTROL_PAR_VALUE,0)
        set_control_par(%pitch_id[$count],$CONTROL_PAR_VALUE,6)
        set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,500000)
        set_control_par(%stutter_id[$count],$CONTROL_PAR_VALUE,0)
        set_control_par(%jump_id[$count],$CONTROL_PAR_VALUE,0)
        set_control_par(%filter_id[$count],$CONTROL_PAR_VALUE,1000000)
        set_control_par(%verb_id[$count],$CONTROL_PAR_VALUE,0)
        set_control_par(%delay_id[$count],$CONTROL_PAR_VALUE,0)
        set_control_par_str(%reverse_id[$count],$CONTROL_PAR_PICTURE,"ReverseArrow1")
        set_control_par(%reverse_id[$count],$CONTROL_PAR_VALUE,0)
      end if
      %slice_state[$count] := 0
      %vol_state[$count] := 500000
      %lofi_state[$count] := 0
      %pitch_state[$count] := 6
      %pan_state[$count] := 500000
      %stutter_state[$count] := 0
      %jump_state[$count] := 0
      %filter_state[$count] := 1000000
      %verb_state[$count] := 0
      %delay_state[$count] := 0
      %attack_state[$count] := 0
      %decay_state[$count] := 1000000
      %auto_state[$count] := 0
      %reso_state[$count] := 0
      %fattack_state[$count] := 0
      %fdecay_state[$count] := 0
      %wave_state[$count] := 0
      %amt_state[$count] := 0
      %freq_state[$count] := 0
      %bit_state[$count] := 1000000
      %update_slice[$count] := 1
      inc($count)
    end while
    call set_aux
  end if
end function

function bypass_all
  if ($bypassAll=1)
    hide_part($gridHighlight,$HIDE_WHOLE_CONTROL)
    $count := 0
    while ($count<$maxSlices)
      set_engine_par($ENGINE_PAR_VOLUME,500000,-1,-1,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_PAN,500000,-1,-1,$NI_BUS_OFFSET+$count)
      set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,1,-1,0,0)
      set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,1,-1,1,0)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+$maxSlices,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+32,-1,-1)
      set_engine_par($ENGINE_PAR_TUNE,500000,$count+$maxSlices+32,-1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+$maxSlices,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+32,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+$maxSlices+32,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+$maxSlices,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+32,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,$count+$maxslices+32,1,-1)
      $index := find_target($count,0,"ENV_VOL")
      $index2 := find_target($count+$maxSlices,0,"ENV_VOL")
      $index3 := find_target($count+32,0,"ENV_VOL")
      $index4 := find_target($count+$maxSlices+32,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,1,$count,0,$index)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,1,$count+$maxSlices,0,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,1,$count+32,0,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,1,$count+$maxSlices+32,0,$index4)
      inc($count)
    end while
  else
    call grid_highlight
    hide_part($gridHighlight,$HIDE_PART_NOTHING)
    $count := 0
    while ($count<$maxSlices)
      if (%slice_count[$count]>=0)
        set_engine_par($ENGINE_PAR_VOLUME,%vol_state[$count],-1,-1,$NI_BUS_OFFSET+$count)
        set_engine_par($ENGINE_PAR_PAN,%pan_state[$count],-1,-1,$NI_BUS_OFFSET+$count)
        select (%pitch_state[$count])
          case 0
            $pitchMod := 416667
          case 1
            $pitchMod := 430556
          case 2
            $pitchMod := 444444
          case 3
            $pitchMod := 458333
          case 4
            $pitchMod := 472222
          case 5
            $pitchMod := 486111
          case 6
            $pitchMod := 500000
          case 7
            $pitchMod := 513899
          case 8
            $pitchMod := 527778
          case 9
            $pitchMod := 541667
          case 10
            $pitchMod := 555556
          case 11
            $pitchMod := 569444
          case 12
            $pitchMod := 583333
        end select
        set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$count,-1,-1)
        set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$count+$maxSlices,-1,-1)
        set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$count+32,-1,-1)
        set_engine_par($ENGINE_PAR_TUNE,$pitchMod,$count+$maxSlices+32,-1,-1)
      end if
      set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,0,-1,0,0)
      set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,0,-1,1,0)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+$maxSlices,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+32,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+$maxSlices+32,0,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+$maxSlices,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+32,1,-1)
      set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,$count+$maxslices+32,1,-1)
      $index := find_target($count,0,"ENV_VOL")
      $index2 := find_target($count+$maxSlices,0,"ENV_VOL")
      $index3 := find_target($count+32,0,"ENV_VOL")
      $index4 := find_target($count+$maxSlices+32,0,"ENV_VOL")
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,0,$count,0,$index)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,0,$count+$maxSlices,0,$index2)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,0,$count+32,0,$index3)
      set_engine_par($ENGINE_PAR_INTMOD_BYPASS,0,$count+$maxSlices+32,0,$index4)
      inc($count)
    end while
  end if
end function

function update_slice
  $previous_slice := $current_slice
  $current_slice := %slice_index[$selected+$tabMod]
  call slice_pic
end function

function switch_tab
  if ($tabbed=0)
    $num_slices := $tabAslices
    $tabMod := 0
    $tabBslice := $sliceDrop
    $tabBfx := $FXDrop
    $previousAux := $currentAux
    $currentAux := $tabAfx
    $current_slice := %slice_index[$tabAslice]
    set_control_par($sliceBackground_id,$CONTROL_PAR_PICTURE_STATE,0)
  else
    $num_slices := $tabBslices
    $tabMod := 8
    $tabAslice := $sliceDrop
    $tabAfx := $FXDrop
    $previousAux := $currentAux
    $currentAux := $tabBfx
    $current_slice := %slice_index[$tabBslice]
    set_control_par($sliceBackground_id,$CONTROL_PAR_PICTURE_STATE,1)
  end if
  $gridAux := $currentAux
  set_control_par(get_ui_id($pic1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic7),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($pic8),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  set_control_par(get_ui_id($slice_control),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
  $hide1 := 0
  $hide2 := 0
  $hide3 := 0
  $hide4 := 0
  $hide5 := 0
  $hide6 := 0
  $hide7 := 0
  $hide8 := 0
  if ($tabMod=0)
    set_control_par_str(%slicePic_id[0],$CONTROL_PAR_PICTURE,"yellowLine")
  else
    set_control_par_str(%slicePic_id[0],$CONTROL_PAR_PICTURE,"blueLine")
  end if
  $count := 1
  while ($count<($maxSlices/2))
    set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%reverse_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%vol_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%lofi_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%pitch_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%pan_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%stutter_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%jump_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%filter_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%verb_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    set_control_par(%delay_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    if ($tabMod=0)
      set_control_par_str(%slicePic_id[$count],$CONTROL_PAR_PICTURE,"yellowLine")
    else
      set_control_par_str(%slicePic_id[$count],$CONTROL_PAR_PICTURE,"blueLine")
    end if
    inc($count)
  end while
  $count := 0
  while ($count<($maxSlices/2))
    if (%slice_count[$count+$tabMod]>-1)
      if (%slice_id[$count+$tabMod]/$pixelLength>532)
        $blueMod := 8
      else
        $blueMod := 6
      end if
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_POS_X,$wave_start+(%slice_id[$count+$tabMod]/$pixelLength)-$blueMod)
      set_control_par(%slicePic_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%slice_state[$count+$tabMod])
      set_control_par(%vol_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%vol_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%vol_state[$count+$tabMod])
      set_control_par(%lofi_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%lofi_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%lofi_state[$count+$tabMod])
      set_control_par(%pitch_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%pitch_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%pitch_state[$count+$tabMod])
      set_control_par(%pan_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%pan_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%pan_state[$count+$tabMod])
      set_control_par(%stutter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%stutter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%stutter_state[$count+$tabMod])
      set_control_par(%jump_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%jump_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%jump_state[$count+$tabMod])
      set_control_par(%filter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%filter_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%filter_state[$count+$tabMod])
      set_control_par(%verb_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%verb_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%verb_state[$count+$tabMod])
      set_control_par(%delay_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
      set_control_par(%delay_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_VALUE,%delay_state[$count+$tabMod])
      if (%slice_state[$count+$tabMod]=1)
        set_control_par_str(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_PICTURE,"ReverseArrow2")
      else
        set_control_par_str(%reverse_id[%slice_count[$count+$tabMod]-$tabMod],$CONTROL_PAR_PICTURE,"ReverseArrow1")
      end if
    end if
    if ($count<=$num_slices)
      if ($tabMod=0)
        set_menu_item_visibility(get_ui_id($sliceDrop),$count+8,0)
        set_menu_item_visibility(get_ui_id($sliceDrop),$count,1)
      else
        set_menu_item_visibility(get_ui_id($sliceDrop),$count+8,1)
        set_menu_item_visibility(get_ui_id($sliceDrop),$count,0)
      end if
    else
      set_menu_item_visibility(get_ui_id($sliceDrop),$count,0)
      set_menu_item_visibility(get_ui_id($sliceDrop),$count+8,0)
    end if
    inc($count)
  end while
  call grid_highlight
  call set_aux
  call show_aux
  hide_part($highlight,$HIDE_WHOLE_CONTROL)
end function

on listener
  select ($NI_SIGNAL_TYPE)
    case $NI_SIGNAL_TIMER_MS
      if ($playMod=$tabMod)
        set_ui_wf_property($wave,$UI_WF_PROP_PLAY_CURSOR,0,get_event_par($play_pos,$EVENT_PAR_PLAY_POS))
      else
        set_ui_wf_property($wave,$UI_WF_PROP_PLAY_CURSOR,0,0)
      end if
  end select
  if ($sync=1)
    if ($currentTempo # $t)
      $currentTempo := $t
      $adjustWait := $maxBPM-(($currentTempo-20)*215)
      %update_slice[0] := 1
      %update_slice[1] := 1
      %update_slice[2] := 1
      %update_slice[3] := 1
      %update_slice[4] := 1
      %update_slice[5] := 1
      %update_slice[6] := 1
      %update_slice[7] := 1
      %update_slice[8] := 1
      %update_slice[9] := 1
      %update_slice[10] := 1
      %update_slice[11] := 1
      %update_slice[12] := 1
      %update_slice[13] := 1
      %update_slice[14] := 1
      %update_slice[15] := 1
      %stutterDiv[0] := 0
      %stutterDiv[1] := %quantiseArray[$t-20]*4
      %stutterDiv[2] := %quantiseArrayTriplet[$t-20]*4
      %stutterDiv[3] := %quantiseArray[$t-20]*2
      %stutterDiv[4] := %quantiseArrayTriplet[$t-20]*2
      %stutterDiv[5] := %quantiseArray[$t-20]
      %stutterDiv[6] := %quantiseArrayTriplet[$t-20]
      %stutterDiv[7] := %quantiseArray[$t-20]*3
      %stutterDiv[8] := %quantiseArray[$t-20]/2
      select ($aDelayTime)
        case 0
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4[$currentTempo-20],-1,0,0)
        case 1
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4t[$currentTempo-20],-1,0,0)
        case 2
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8[$currentTempo-20],-1,0,0)
        case 3
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8t[$currentTempo-20],-1,0,0)
        case 4
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16[$currentTempo-20],-1,0,0)
        case 5
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16t[$currentTempo-20],-1,0,0)
        case 6
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray316[$currentTempo-20],-1,0,0)
        case 7
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray32[$currentTempo-20],-1,0,0)
      end select
      $count := 0
      while ($count<$maxSlices)
        $index := find_target($count,2,"LFO_FILTER")
        $index2 := find_target($count+$maxSlices,2,"LFO_FILTER")
        $index3 := find_target($count+32,2,"LFO_FILTER")
        $index4 := find_target($count+$maxSlices+32,2,"LFO_FILTER")
        select (%freq_state[$current_slice])
          case 0
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 1
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 2
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 3
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 4
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 5
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 6
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 7
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+$maxSlices+32,2,$index4)
        end select
        inc($count)
      end while
    end if
  else
    if (ms_to_ticks(60000000)/960 # $currentTempo)
      $currentTempo := ms_to_ticks(60000000)/960
      $adjustWait := $maxBPM-(($currentTempo-20)*215)
      %update_slice[0] := 1
      %update_slice[1] := 1
      %update_slice[2] := 1
      %update_slice[3] := 1
      %update_slice[4] := 1
      %update_slice[5] := 1
      %update_slice[6] := 1
      %update_slice[7] := 1
      %update_slice[8] := 1
      %update_slice[9] := 1
      %update_slice[10] := 1
      %update_slice[11] := 1
      %update_slice[12] := 1
      %update_slice[13] := 1
      %update_slice[14] := 1
      %update_slice[15] := 1
      %stutterDiv[0] := 0
      %stutterDiv[1] := $DURATION_QUARTER
      %stutterDiv[2] := $DURATION_QUARTER_TRIPLET
      %stutterDiv[3] := $DURATION_EIGHTH
      %stutterDiv[4] := $DURATION_EIGHTH_TRIPLET
      %stutterDiv[5] := $DURATION_SIXTEENTH
      %stutterDiv[6] := $DURATION_SIXTEENTH_TRIPLET
      %stutterDiv[7] := $DURATION_SIXTEENTH*3
      %stutterDiv[8] := $DURATION_SIXTEENTH/2
      select ($aDelayTime)
        case 0
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4[$currentTempo-20],-1,0,0)
        case 1
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4t[$currentTempo-20],-1,0,0)
        case 2
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8[$currentTempo-20],-1,0,0)
        case 3
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8t[$currentTempo-20],-1,0,0)
        case 4
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16[$currentTempo-20],-1,0,0)
        case 5
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16t[$currentTempo-20],-1,0,0)
        case 6
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray316[$currentTempo-20],-1,0,0)
        case 7
          set_engine_par($ENGINE_PAR_DL_TIME,%delayArray32[$currentTempo-20],-1,0,0)
      end select
      $count := 0
      while ($count<$maxSlices)
        $index := find_target($count,2,"LFO_FILTER")
        $index2 := find_target($count+$maxSlices,2,"LFO_FILTER")
        $index3 := find_target($count+32,2,"LFO_FILTER")
        $index4 := find_target($count+$maxSlices+32,2,"LFO_FILTER")
        select (%freq_state[$current_slice])
          case 0
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 1
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray4t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 2
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 3
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray8t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 4
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 5
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray16t[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 6
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray316[$currentTempo-20],$count+$maxSlices+32,2,$index4)
          case 7
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count,2,$index)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+$maxSlices,2,$index2)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+32,2,$index3)
            set_engine_par($ENGINE_PAR_INTMOD_FREQUENCY,%lfoArray32[$currentTempo-20],$count+$maxSlices+32,2,$index4)
        end select
        inc($count)
      end while
    end if
  end if
end on

on note
  message("")
  ignore_event($EVENT_ID)
  if ($EVENT_NOTE<60 or ($EVENT_ID=$on_id))
    exit
  else
    if ($EVENT_NOTE<68)
      if ($EVENT_NOTE>(60+$tabAslices))
        exit
      end if
      $playMod := 0
      $maxLoop := $tabAslices
    else
      if ($EVENT_NOTE>(68+$tabBslices) or ($loopMode=0))
        exit
      end if
      $playMod := 8
      $maxLoop := $tabBslices
    end if
  end if
  fade_out($clone_id,1000,1)
  $looping := 0
  stop_wait($on_id,1)
  $on_id := $NI_CALLBACK_ID
  $old_id := $EVENT_ID
  if ($isOn<1)
    inc($isOn)
  end if
  disallow_group($ALL_GROUPS)
  $loopNote := $EVENT_NOTE-60
  if ($oneShot=1)
    call slice_play
    $count := $groupAllow*$maxSlices
    while ($count<($maxSlices+($groupAllow*$maxSlices)))
      if ($sync=1)
        allow_group($count+32)
      else
        allow_group($count)
      end if
      inc($count)
    end while
    $new_id := play_note(%slice_index[$EVENT_NOTE-60]+60,$EVENT_VELOCITY,%start_points[%slice_index[$loopNote]],-1)
    $clone_id := $new_id
    $play_pos := $new_id
    fade_in($new_id,1000)
    if (%auto_state[%slice_index[$loopNote]]>0 and ($bypassAll=0))
      $stutterOn := 0
      $countPan := 0
      $sliceDone := 0
      $startPoint := %start_points[%slice_index[$loopNote]]
      while ($stutterOn=0)
        if ($countPan>%stutterDiv[%auto_state[%slice_index[$loopNote]]] and (%auto_state[%slice_index[$loopNote]]>0))
          if ($panMod=0)
            $panMod := 1
            $panAttack := 1000000
          else
            $panMod := 0
            $panAttack := 0
          end if
          $countPan := 0
        end if
        if ($countPan<10 and (%auto_state[%slice_index[$loopNote]]>0))
          if ($panMod=1)
            set_engine_par($ENGINE_PAR_PAN,$panAttack,-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
            $panAttack := $panAttack-100000
          else
            set_engine_par($ENGINE_PAR_PAN,$panAttack,-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
            $panAttack := $panAttack+100000
          end if
        end if
        $countPan := $countPan+1000
        $sliceDone := $sliceDone+1000
        if ($sliceDone>=%wait_times[%slice_index[$loopNote]])
          $stutterOn := 1
          set_engine_par($ENGINE_PAR_PAN,%pan_state[%slice_index[$loopNote]],-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
          fade_out($new_id,1000,1)
          $isOn := 0
        end if
        wait(1000)
        if ($on_id # $NI_CALLBACK_ID)
          exit
        end if
      end while
    else
      if (%wait_times[%slice_index[$loopNote]]>0)
        wait(%wait_times[%slice_index[$loopNote]]-$adjustWait)
      end if
      fade_out($new_id,1000,1)
      $isOn := 0
    end if
  else
    $loopCount := 1
    while ($loopCount=1)
      fade_out($new_id,1000,1)
      call slice_play
      disallow_group($ALL_GROUPS)
      fade_out($new_id,1000,1)
      $count := $groupAllow*$maxSlices
      while ($count<($maxSlices+($groupAllow*$maxSlices)))
        if ($sync=1)
          allow_group($count+32)
        else
          allow_group($count)
        end if
        inc($count)
      end while
      $new_id := play_note(%slice_index[$loopNote]+60,$EVENT_VELOCITY,%start_points[%slice_index[$loopNote]],-1)
      $clone_id := $new_id
      $play_pos := $new_id
      fade_in($new_id,1000)
      if ($bypassAll=1)
        if (%wait_times[%slice_index[$loopNote]]>0)
          wait(%wait_times[%slice_index[$loopNote]])
        end if
      else
        if (%stutter_state[%slice_index[$loopNote]]>0 or (%jump_state[%slice_index[$loopNote]]>0) or (%auto_state[%slice_index[$loopNote]]>0))
          $stutterOn := 0
          $count := 0
          $countJump := 0
          $countPan := 0
          $sliceDone := 0
          $startPoint := %start_points[%slice_index[$loopNote]]
          while ($stutterOn=0)
            if ($count>%stutterDiv[%stutter_state[%slice_index[$loopNote]]] and (%stutter_state[%slice_index[$loopNote]]>0))
              fade_out($new_id,10000,1)
              $new_id := play_note(%slice_index[$loopNote]+60,$EVENT_VELOCITY,$startPoint,-1)
              $play_pos := $new_id
              $clone_id := $new_id
              fade_in($new_id,10000)
              $count := 0
            end if
            if ($countJump>%stutterDiv[%jump_state[%slice_index[$loopNote]]] and (%jump_state[%slice_index[$loopNote]]>0))
              fade_out($new_id,10000,1)
              select (%jumpD_state[%slice_index[$loopNote]])
                case 0
                  $jumpPos := $sample_length/%jumpDiv[%jumpGap_state[%slice_index[$loopNote]]]
                  $startPoint := %jumpDiv[%jumpGap_state[%slice_index[$loopNote]]]*random(0,$jumpPos)
                case 1
                  $startPoint := $startPoint+%jumpDiv[%jumpGap_state[%slice_index[$loopNote]]]
                  if ($startPoint>$sample_length)
                    $startPoint := 0
                  end if
                case 2
                  $startPoint := $startPoint-%jumpDiv[%jumpGap_state[%slice_index[$loopNote]]]
                  if ($startPoint<0)
                    $startPoint := $sample_length
                  end if
              end select
              $new_id := play_note(%slice_index[$loopNote]+60,$EVENT_VELOCITY,$startPoint,-1)
              $play_pos := $new_id
              $clone_id := $new_id
              fade_in($new_id,10000)
              $count := 0
              $countJump := 0
            end if
            if ($countPan>%stutterDiv[%auto_state[%slice_index[$loopNote]]] and (%auto_state[%slice_index[$loopNote]]>0))
              if ($panMod=0)
                $panMod := 1
                $panAttack := 1000000
              else
                $panMod := 0
                $panAttack := 0
              end if
              $countPan := 0
            end if
            if ($countPan<10 and (%auto_state[%slice_index[$loopNote]]>0))
              if ($panMod=1)
                set_engine_par($ENGINE_PAR_PAN,$panAttack,-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
                $panAttack := $panAttack-100000
              else
                set_engine_par($ENGINE_PAR_PAN,$panAttack,-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
                $panAttack := $panAttack+100000
              end if
            end if
            $count := $count+1000
            $countJump := $countJump+1000
            $countPan := $countPan+1000
            $sliceDone := $sliceDone+1000
            if ($sliceDone>=%wait_times[%slice_index[$loopNote]])
              $stutterOn := 1
              set_engine_par($ENGINE_PAR_PAN,%pan_state[%slice_index[$loopNote]],-1,-1,$NI_BUS_OFFSET+%slice_index[$loopNote])
            end if
            wait(1000)
            if ($on_id # $NI_CALLBACK_ID)
              exit
            end if
          end while
        else
          if (%wait_times[%slice_index[$loopNote]]>0)
            wait(%wait_times[%slice_index[$loopNote]])
          end if
        end if
      end if
      if ($on_id # $NI_CALLBACK_ID)
        exit
      end if
      inc($loopNote)
      if ($loopNote-$playMod>$maxLoop)
        if ($loopMode=1)
          if ($playMod=0)
            $playMod := 8
            $maxLoop := $tabBslices
          else
            $playMod := 0
            $maxLoop := $tabAslices
          end if
        end if
        $loopNote := $playMod
      end if
    end while
  end if
end on

on release
  ignore_event($new_id)
  if ($oneShot=0)
    fade_out($new_id,1000,1)
    if ($EVENT_ID=$old_id)
      dec($isOn)
    end if
    if ($isOn=0)
      $loopCount := 0
      stop_wait($on_id,1)
    end if
  else
    $isOn := 0
  end if
end on

on ui_control($slice_control)
  if ($slice_control>$currentQuantise and ($slice_control<($sample_length-$currentQuantise)))
    if ($current_slice # 0)
      if ($num_slices>0)
        call slice_position2
        if ($slice_control>=$sliceBefore and ($slice_control<=$nextSlice))
          %slice_id[$current_slice] := $slice_control
          call move_slice
          %update_slice[$current_slice] := 1
          %update_slice[%slice_index[%slice_count[$current_slice]-1]] := 1
          set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        end if
      end if
    end if
  end if
end on

on ui_control($remove_slice)
  set_control_par_str(get_ui_id($remove_slice),$CONTROL_PAR_PICTURE,"remove2")
  wait(100000)
  set_control_par_str(get_ui_id($remove_slice),$CONTROL_PAR_PICTURE,"remove1")
  if ($isOn=0)
    if ($num_slices=0 or ($current_slice=(0+$tabMod)))
    else
      $previous_slice := $current_slice
      $current_slice := %slice_index[%slice_count[$previous_slice]-1]
      $count := 0
      while ($count<($maxSlices/2))
        if (%slice_count[$count+$tabMod]>%slice_count[$previous_slice])
          dec(%slice_count[$count+$tabMod])
        end if
        %update_slice[$count+$tabMod] := 1
        inc($count)
      end while
      call alter_grid_down
      %slice_count[$previous_slice] := -1
      %slice_id[$previous_slice] := 0
      %sliceNext[$previous_slice] := 1
      set_control_par(%slicePic_id[$previous_slice-$tabMod],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      if ($current_slice # 0 and ($current_slice # 8))
        set_control_par(%slicePic_id[$current_slice-$tabMod],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
      end if
      $slice_control := %slice_id[$current_slice]
      if ($tabbed=0)
        dec($tabAslices)
        $num_slices := $tabAslices
      else
        dec($tabBslices)
        $num_slices := $tabBslices
      end if
      call index_slices
      call move_slice
      call slice_position
      call set_aux
      call grid_highlight
      hide_part($highlight,$HIDE_WHOLE_CONTROL)
      if ($current_slice=0)
        hide_part($pic1,$HIDE_WHOLE_CONTROL)
        $hide1 := 0
      end if
    end if
  end if
end on

on ui_control($matrix1)
  $previous_slice := $current_slice
  $current_slice := $tabMod
  call slice_pic
  call set_highlight
end on

on ui_control($matrix2)
  if ($num_slices>0)
    $previous_slice := $current_slice
    $current_slice := %slice_index[1+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix3)
  if ($num_slices>1)
    $previous_slice := $current_slice
    $current_slice := %slice_index[2+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix4)
  if ($num_slices>2)
    $previous_slice := $current_slice
    $current_slice := %slice_index[3+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix5)
  if ($num_slices>3)
    $previous_slice := $current_slice
    $current_slice := %slice_index[4+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix6)
  if ($num_slices>4)
    $previous_slice := $current_slice
    $current_slice := %slice_index[5+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix7)
  if ($num_slices>5)
    $previous_slice := $current_slice
    $current_slice := %slice_index[6+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($matrix8)
  if ($num_slices>6)
    $previous_slice := $current_slice
    $current_slice := %slice_index[7+$tabMod]
    call slice_pic
    call set_highlight
  end if
end on

on ui_control($fx1)
  $previousAux := $currentAux
  $currentAux := 0
  $gridAux := 0
  call show_aux
  call grid_highlight
end on

on ui_control($fx2)
  $previousAux := $currentAux
  $currentAux := 1
  $gridAux := 1
  call show_aux
  call grid_highlight
end on

on ui_control($fx3)
  $previousAux := $currentAux
  $currentAux := 2
  $gridAux := 2
  call show_aux
  call grid_highlight
end on

on ui_control($fx4)
  $previousAux := $currentAux
  $currentAux := 3
  $gridAux := 3
  call show_aux
  call grid_highlight
end on

on ui_control($fx5)
  $previousAux := $currentAux
  $currentAux := 4
  $gridAux := 4
  call show_aux
  call grid_highlight
end on

on ui_control($fx6)
  $previousAux := $currentAux
  $currentAux := 5
  $gridAux := 5
  call show_aux
  call grid_highlight
end on

on ui_control($fx7)
  $previousAux := $currentAux
  $currentAux := 5
  $gridAux := 6
  call show_aux
  call grid_highlight
end on

on ui_control($fx8)
  $previousAux := $currentAux
  $currentAux := 6
  $gridAux := 7
  call show_aux
  call grid_highlight
end on

on ui_control($fx9)
  $previousAux := $currentAux
  $currentAux := 6
  $gridAux := 8
  call show_aux
  call grid_highlight
end on

on ui_control($slicePic1)
  $previous_slice := $current_slice
  $current_slice := $tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic2)
  $previous_slice := $current_slice
  $current_slice := 1+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic3)
  $previous_slice := $current_slice
  $current_slice := 2+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic4)
  $previous_slice := $current_slice
  $current_slice := 3+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic5)
  $previous_slice := $current_slice
  $current_slice := 4+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic6)
  $previous_slice := $current_slice
  $current_slice := 5+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic7)
  $previous_slice := $current_slice
  $current_slice := 6+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($slicePic8)
  $previous_slice := $current_slice
  $current_slice := 7+$tabMod
  call slice_pic
  set_control_par($highlight_id,$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end on

on ui_control($reverse0)
  %slice_state[$tabMod] := $reverse0
  $selected := 0
  %update_slice[$tabMod] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse1)
  %slice_state[%slice_index[1+$tabMod]] := $reverse1
  $selected := 1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse2)
  %slice_state[%slice_index[2+$tabMod]] := $reverse2
  $selected := 2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse3)
  %slice_state[%slice_index[3+$tabMod]] := $reverse3
  $selected := 3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse4)
  %slice_state[%slice_index[4+$tabMod]] := $reverse4
  $selected := 4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse5)
  %slice_state[%slice_index[5+$tabMod]] := $reverse5
  $selected := 5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse6)
  %slice_state[%slice_index[6+$tabMod]] := $reverse6
  $selected := 6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($reverse7)
  %slice_state[%slice_index[7+$tabMod]] := $reverse7
  $selected := 7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call reverse_send
end on

on ui_control($vol1)
  $selected := 0
  %vol_state[%slice_index[$tabMod]] := $vol1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol2)
  $selected := 1
  %vol_state[%slice_index[$selected+$tabMod]] := $vol2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol3)
  $selected := 2
  %vol_state[%slice_index[$selected+$tabMod]] := $vol3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol4)
  $selected := 3
  %vol_state[%slice_index[$selected+$tabMod]] := $vol4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol5)
  $selected := 4
  %vol_state[%slice_index[$selected+$tabMod]] := $vol5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol6)
  $selected := 5
  %vol_state[%slice_index[$selected+$tabMod]] := $vol6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol7)
  $selected := 6
  %vol_state[%slice_index[$selected+$tabMod]] := $vol7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($vol8)
  $selected := 7
  %vol_state[%slice_index[$selected+$tabMod]] := $vol8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call vol_send
end on

on ui_control($lofi1)
  $selected := 0
  %lofi_state[%slice_index[$tabMod]] := $lofi1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi2)
  $selected := 1
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi3)
  $selected := 2
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi4)
  $selected := 3
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi5)
  $selected := 4
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi6)
  $selected := 5
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi7)
  $selected := 6
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($lofi8)
  $selected := 7
  %lofi_state[%slice_index[$selected+$tabMod]] := $lofi8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call lofi_send
end on

on ui_control($pitch1)
  $selected := 0
  %pitch_state[%slice_index[$tabMod]] := $pitch1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch2)
  $selected := 1
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch3)
  $selected := 2
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch4)
  $selected := 3
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch5)
  $selected := 4
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch6)
  $selected := 5
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch7)
  $selected := 6
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pitch8)
  $selected := 7
  %pitch_state[%slice_index[$selected+$tabMod]] := $pitch8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pitch_send
end on

on ui_control($pan1)
  $selected := 0
  %pan_state[%slice_index[$tabMod]] := $pan1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan2)
  $selected := 1
  %pan_state[%slice_index[$selected+$tabMod]] := $pan2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan3)
  $selected := 2
  %pan_state[%slice_index[$selected+$tabMod]] := $pan3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan4)
  $selected := 3
  %pan_state[%slice_index[$selected+$tabMod]] := $pan4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan5)
  $selected := 4
  %pan_state[%slice_index[$selected+$tabMod]] := $pan5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan6)
  $selected := 5
  %pan_state[%slice_index[$selected+$tabMod]] := $pan6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan7)
  $selected := 6
  %pan_state[%slice_index[$selected+$tabMod]] := $pan7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($pan8)
  $selected := 7
  %pan_state[%slice_index[$selected+$tabMod]] := $pan8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call pan_send
end on

on ui_control($filter1)
  $selected := 0
  %filter_state[%slice_index[$tabMod]] := $filter1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter2)
  $selected := 1
  %filter_state[%slice_index[$selected+$tabMod]] := $filter2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter3)
  $selected := 2
  %filter_state[%slice_index[$selected+$tabMod]] := $filter3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter4)
  $selected := 3
  %filter_state[%slice_index[$selected+$tabMod]] := $filter4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter5)
  $selected := 4
  %filter_state[%slice_index[$selected+$tabMod]] := $filter5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter6)
  $selected := 5
  %filter_state[%slice_index[$selected+$tabMod]] := $filter6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter7)
  $selected := 6
  %filter_state[%slice_index[$selected+$tabMod]] := $filter7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($filter8)
  $selected := 7
  %filter_state[%slice_index[$selected+$tabMod]] := $filter8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call filter_send
end on

on ui_control($verb1)
  $selected := 0
  %verb_state[%slice_index[$tabMod]] := $verb1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb2)
  $selected := 1
  %verb_state[%slice_index[$selected+$tabMod]] := $verb2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb3)
  $selected := 2
  %verb_state[%slice_index[$selected+$tabMod]] := $verb3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb4)
  $selected := 3
  %verb_state[%slice_index[$selected+$tabMod]] := $verb4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb5)
  $selected := 4
  %verb_state[%slice_index[$selected+$tabMod]] := $verb5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb6)
  $selected := 5
  %verb_state[%slice_index[$selected+$tabMod]] := $verb6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb7)
  $selected := 6
  %verb_state[%slice_index[$selected+$tabMod]] := $verb7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($verb8)
  $selected := 7
  %verb_state[%slice_index[$selected+$tabMod]] := $verb8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call verb_send
end on

on ui_control($delay1)
  $selected := 0
  %delay_state[%slice_index[$tabMod]] := $delay1
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay2)
  $selected := 1
  %delay_state[%slice_index[$selected+$tabMod]] := $delay2
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay3)
  $selected := 2
  %delay_state[%slice_index[$selected+$tabMod]] := $delay3
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay4)
  $selected := 3
  %delay_state[%slice_index[$selected+$tabMod]] := $delay4
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay5)
  $selected := 4
  %delay_state[%slice_index[$selected+$tabMod]] := $delay5
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay6)
  $selected := 5
  %delay_state[%slice_index[$selected+$tabMod]] := $delay6
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay7)
  $selected := 6
  %delay_state[%slice_index[$selected+$tabMod]] := $delay7
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($delay8)
  $selected := 7
  %delay_state[%slice_index[$selected+$tabMod]] := $delay8
  %update_slice[%slice_index[$selected+$tabMod]] := 1
  call update_slice
  call delay_send
end on

on ui_control($stutter1)
  $selected := 0
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter1)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter1
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter2)
  $selected := 1
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter2)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter2
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter3)
  $selected := 2
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter3)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter3
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter4)
  $selected := 3
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter4)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter4
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter5)
  $selected := 4
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter5)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter5
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter6)
  $selected := 5
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter6)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter6
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter7)
  $selected := 6
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter7)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter7
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($stutter8)
  $selected := 7
  call update_slice
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$stutter8)
  %stutter_state[%slice_index[$selected+$tabMod]] := $stutter8
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($jump1)
  $selected := 0
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump1)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump1
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump2)
  $selected := 1
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump2)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump2
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump3)
  $selected := 2
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump3)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump3
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump4)
  $selected := 3
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump4)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump4
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump5)
  $selected := 4
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump5)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump5
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump6)
  $selected := 5
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump6)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump6
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump7)
  $selected := 6
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump7)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump7
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($jump8)
  $selected := 7
  call update_slice
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$jump8)
  %jump_state[%slice_index[$selected+$tabMod]] := $jump8
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($aVol)
  %vol_state[$current_slice] := $aVol
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%vol_id[$selected],$CONTROL_PAR_VALUE,$aVol)
  %update_slice[$current_slice] := 1
  call vol_send
end on

on ui_control($aAttack)
  %attack_state[$current_slice] := $aAttack
  %update_slice[$current_slice] := 1
  $selected := %slice_count[$current_slice]-$tabMod
  call attack_send
end on

on ui_control($aDecay)
  %decay_state[$current_slice] := $aDecay
  %update_slice[$current_slice] := 1
  $selected := %slice_count[$current_slice]-$tabMod
  call decay_send
end on

on ui_control($aPitch)
  %pitch_state[$current_slice] := $aPitch
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%pitch_id[$selected],$CONTROL_PAR_VALUE,$aPitch)
  %update_slice[$current_slice] := 1
  call pitch_send
end on

on ui_control($aPan)
  %pan_state[$current_slice] := $aPan
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%pan_id[$selected],$CONTROL_PAR_VALUE,$aPan)
  %update_slice[$current_slice] := 1
  call pan_send
end on

on ui_control($aAutoPan)
  %auto_state[$current_slice] := $aAutoPan
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
end on

on ui_control($aFilterCutoff)
  %filter_state[$current_slice] := $aFilterCutoff
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%filter_id[$selected],$CONTROL_PAR_VALUE,$aFilterCutoff)
  %update_slice[$current_slice] := 1
  call filter_send
end on

on ui_control($aFilterReso)
  %reso_state[$current_slice] := $aFilterReso
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call reso_send
end on

on ui_control($aFilterAttack)
  %fAttack_state[$current_slice] := $aFilterAttack
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call fAttack_send
end on

on ui_control($aFilterDecay)
  %fDecay_state[$current_slice] := $aFilterDecay
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call fDecay_send
end on

on ui_control($aFilterWave)
  %wave_state[$current_slice] := $aFilterWave
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call wave_send
end on

on ui_control($aFilterFreq)
  %freq_state[$current_slice] := $aFilterFreq
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call freq_send
end on

on ui_control($aFilterAmt)
  %amt_state[$current_slice] := $aFilterAmt
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call amt_send
end on

on ui_control($aLofiSamp)
  %lofi_state[$current_slice] := 1000000-$aLofiSamp
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%lofi_id[$selected],$CONTROL_PAR_VALUE,1000000-$aLofiSamp)
  %update_slice[$current_slice] := 1
  call lofi_send
end on

on ui_control($aLofiBit)
  %bit_state[$current_slice] := $aLofiBit
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
  call bit_send
end on

on ui_control($aVerbSend)
  %verb_state[$current_slice] := $aVerbSend
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%verb_id[$selected],$CONTROL_PAR_VALUE,$aVerbSend)
  %update_slice[$current_slice] := 1
  call verb_send
end on

on ui_control($aDelaySend)
  %delay_state[$current_slice] := $aDelaySend
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%delay_id[$selected],$CONTROL_PAR_VALUE,$aDelaySend)
  %update_slice[$current_slice] := 1
  call delay_send
end on

on ui_control($aVerbSize)
  set_engine_par($ENGINE_PAR_IRC_LENGTH_RATIO_ER,$aVerbSize,-1,1,0)
  set_engine_par($ENGINE_PAR_IRC_LENGTH_RATIO_LR,$aVerbSize,-1,1,0)
end on

on ui_control($aDelayTime)
  select ($aDelayTime)
    case 0
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4[$currentTempo-20],-1,0,0)
    case 1
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray4t[$currentTempo-20],-1,0,0)
    case 2
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8[$currentTempo-20],-1,0,0)
    case 3
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray8t[$currentTempo-20],-1,0,0)
    case 4
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16[$currentTempo-20],-1,0,0)
    case 5
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray16t[$currentTempo-20],-1,0,0)
    case 6
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray316[$currentTempo-20],-1,0,0)
    case 7
      set_engine_par($ENGINE_PAR_DL_TIME,%delayArray32[$currentTempo-20],-1,0,0)
  end select
end on

on ui_control($aDelayFeedback)
  set_engine_par($ENGINE_PAR_DL_FEEDBACK,$aDelayFeedback,-1,0,0)
end on

on ui_control($aDelayDamp)
  set_engine_par($ENGINE_PAR_DL_DAMPING,$aDelayFeedback,-1,0,0)
end on

on ui_control($aStutter)
  %stutter_state[$current_slice] := $aStutter
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%stutter_id[$selected],$CONTROL_PAR_VALUE,$aStutter)
  %update_slice[$current_slice] := 1
  $currentGlitch := 7
  call glitch_send
end on

on ui_control($aJump)
  %jump_state[$current_slice] := $aJump
  $selected := %slice_count[$current_slice]-$tabMod
  set_control_par(%jump_id[$selected],$CONTROL_PAR_VALUE,$aJump)
  %update_slice[$current_slice] := 1
  $currentGlitch := 8
  call glitch_send
end on

on ui_control($aJumpD)
  %jumpD_state[$current_slice] := $aJumpD
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
end on

on ui_control($aJumpGap)
  %jumpGap_state[$current_slice] := $aJumpGap
  $selected := %slice_count[$current_slice]-$tabMod
  %update_slice[$current_slice] := 1
end on

on ui_control($quantiseSlice)
  set_control_par_str(get_ui_id($quantiseSlice),$CONTROL_PAR_PICTURE,"quan2")
  wait(100000)
  set_control_par_str(get_ui_id($quantiseSlice),$CONTROL_PAR_PICTURE,"quan1")
  if ($isOn=0)
    call quantise_slice
  end if
end on

on ui_control($quantiseAll)
  set_control_par_str(get_ui_id($quantiseAll),$CONTROL_PAR_PICTURE,"quan2")
  wait(100000)
  set_control_par_str(get_ui_id($quantiseAll),$CONTROL_PAR_PICTURE,"quan1")
  if ($isOn=0)
    call quantise_all
  end if
end on

on ui_control($test1)
  $newSlice := 1
  call add_slice
end on

on ui_control($test2)
  $newSlice := 2
  call add_slice
end on

on ui_control($test3)
  $newSlice := 3
  call add_slice
end on

on ui_control($test4)
  $newSlice := 4
  call add_slice
end on

on ui_control($test5)
  $newSlice := 5
  call add_slice
end on

on ui_control($test6)
  $newSlice := 6
  call add_slice
end on

on ui_control($test7)
  $newSlice := 7
  call add_slice
end on

on ui_control($test8)
  $newSlice := 8
  call add_slice
end on

on ui_control($test9)
  $newSlice := 9
  call add_slice
end on

on ui_control($test10)
  $newSlice := 10
  call add_slice
end on

on ui_control($test11)
  $newSlice := 11
  call add_slice
end on

on ui_control($test12)
  $newSlice := 12
  call add_slice
end on

on ui_control($test13)
  $newSlice := 13
  call add_slice
end on

on ui_control($test14)
  $newSlice := 14
  call add_slice
end on

on ui_control($test15)
  $newSlice := 15
  call add_slice
end on

on ui_control($test16)
  $newSlice := 16
  call add_slice
end on

on ui_control($test17)
  $newSlice := 17
  call add_slice
end on

on ui_control($test18)
  $newSlice := 18
  call add_slice
end on

on ui_control($test19)
  $newSlice := 19
  call add_slice
end on

on ui_control($test20)
  $newSlice := 20
  call add_slice
end on

on ui_control($test21)
  $newSlice := 21
  call add_slice
end on

on ui_control($test22)
  $newSlice := 22
  call add_slice
end on

on ui_control($test23)
  $newSlice := 23
  call add_slice
end on

on ui_control($test24)
  $newSlice := 24
  call add_slice
end on

on ui_control($test25)
  $newSlice := 25
  call add_slice
end on

on ui_control($test26)
  $newSlice := 26
  call add_slice
end on

on ui_control($test27)
  $newSlice := 27
  call add_slice
end on

on ui_control($test28)
  $newSlice := 28
  call add_slice
end on

on ui_control($test29)
  $newSlice := 29
  call add_slice
end on

on ui_control($test30)
  $newSlice := 30
  call add_slice
end on

on ui_control($test31)
  $newSlice := 31
  call add_slice
end on

on ui_control($test)
  call show_index
end on

on ui_control($resetAll)
  set_control_par_str(get_ui_id($resetAll),$CONTROL_PAR_PICTURE,"quan2")
  wait(100000)
  set_control_par_str(get_ui_id($resetAll),$CONTROL_PAR_PICTURE,"quan1")
  call reset_all
end on

on ui_control($resetSlice)
  set_control_par_str(get_ui_id($resetSlice),$CONTROL_PAR_PICTURE,"quan2")
  wait(100000)
  set_control_par_str(get_ui_id($resetSlice),$CONTROL_PAR_PICTURE,"quan1")
  call reset_slice
end on

on ui_control($bypassAll)
  call bypass_all
end on

on ui_control($highlight)
  hide_part($highlight,$HIDE_WHOLE_CONTROL)
end on

on ui_control($tabA)
  if ($tabA=1)
    $tabB := 0
    $tabbed := 0
    set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_PICTURE,"TabA2")
    set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_PICTURE,"TabB1")
    call switch_tab
  end if
end on

on ui_control($tabB)
  if ($loopMode=1)
    if ($tabB=1)
      $tabA := 0
      $tabbed := 1
      set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_PICTURE,"TabA1")
      set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_PICTURE,"TabB2")
      call switch_tab
    end if
  end if
end on

on ui_control($sliceDrop)
  select ($sliceDrop)
    case 0
      $selected := 0
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 1
      $selected := 1
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 2
      $selected := 2
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 3
      $selected := 3
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 4
      $selected := 4
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 5
      $selected := 5
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 6
      $selected := 6
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 7
      $selected := 7
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 8
      $selected := 0
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 9
      $selected := 1
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 10
      $selected := 2
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 11
      $selected := 3
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 12
      $selected := 4
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 13
      $selected := 5
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 14
      $selected := 6
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
    case 15
      $selected := 7
      call update_slice
      $auxSlice := $current_slice
      call set_aux
      call grid_highlight
  end select
  call set_highlight
end on

on ui_control($FXDrop)
  $previousAux := $currentAux
  $previousGrid := $gridAux
  select ($FXDrop)
    case 0
      $currentAux := 0
      $gridAux := 0
    case 1
      $currentAux := 1
      $gridAux := 1
    case 2
      $currentAux := 2
      $gridAux := 2
    case 3
      $currentAux := 3
      $gridAux := 3
    case 4
      $currentAux := 4
      $gridAux := 4
    case 5
      $currentAux := 5
      $gridAux := 5
    case 6
      $currentAux := 6
      $gridAux := 7
  end select
  call show_aux
  call grid_highlight
end on

on ui_control($oneShotDown)
  if ($oneShot=1)
    $oneShot := 0
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,0)
  else
    $oneShot := 1
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,1)
  end if
end on

on ui_control($oneShotUp)
  if ($oneShot=1)
    $oneShot := 0
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,0)
  else
    $oneShot := 1
    set_control_par(get_ui_id($oneShotLabel),$CONTROL_PAR_PICTURE_STATE,1)
  end if
end on

on ui_control($quantiseDown)
  select ($quantiseSelect)
    case 0
      $quantiseSelect := 5
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,5)
    case 1
      $quantiseSelect := 0
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,0)
    case 2
      $quantiseSelect := 1
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,1)
    case 3
      $quantiseSelect := 2
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,2)
    case 4
      $quantiseSelect := 3
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,3)
    case 5
      $quantiseSelect := 4
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,4)
  end select
end on

on ui_control($quantiseUp)
  select ($quantiseSelect)
    case 0
      $quantiseSelect := 1
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,1)
    case 1
      $quantiseSelect := 2
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,2)
    case 2
      $quantiseSelect := 3
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,3)
    case 3
      $quantiseSelect := 4
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,4)
    case 4
      $quantiseSelect := 5
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,5)
    case 5
      $quantiseSelect := 0
      set_control_par(get_ui_id($quantiseLabel),$CONTROL_PAR_PICTURE_STATE,0)
  end select
end on

on ui_control($tempoDown)
  if ($sync=1)
    $sync := 0
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,1)
  else
    $sync := 1
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,0)
  end if
end on

on ui_control($tempoUp)
  if ($sync=1)
    $sync := 0
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,1)
  else
    $sync := 1
    set_control_par(get_ui_id($tempoLabel),$CONTROL_PAR_PICTURE_STATE,0)
  end if
end on

on ui_control($barsDown)
  if ($loopMode=1)
    $loopMode := 0
    set_control_par(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE_STATE,0)
    $count := 0
    while ($count<8)
      set_key_color(68+$count,$KEY_COLOR_WHITE)
      inc($count)
    end while
    if ($tabbed=1)
      $tabB := 0
      $tabbed := 0
      set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_PICTURE,"TabA2")
      set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_PICTURE,"TabB1")
      call switch_tab
    end if
    hide_part($tabB,$HIDE_WHOLE_CONTROL)
  else
    $loopMode := 1
    set_control_par(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE_STATE,1)
    $count := 0
    while ($count<=$tabBslices)
      set_key_color(68+$count,$KEY_COLOR_BLUE)
      inc($count)
    end while
    hide_part($tabB,$HIDE_PART_NOTHING)
  end if
end on

on ui_control($barsUp)
  if ($loopMode=1)
    $loopMode := 0
    set_control_par(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE_STATE,0)
    $count := 0
    while ($count<8)
      set_key_color(68+$count,$KEY_COLOR_WHITE)
      inc($count)
    end while
    if ($tabbed=1)
      $tabB := 0
      $tabbed := 0
      set_control_par_str(get_ui_id($tabA),$CONTROL_PAR_PICTURE,"TabA2")
      set_control_par_str(get_ui_id($tabB),$CONTROL_PAR_PICTURE,"TabB1")
      call switch_tab
    end if
    hide_part($tabB,$HIDE_WHOLE_CONTROL)
  else
    $loopMode := 1
    set_control_par(get_ui_id($barsLabel),$CONTROL_PAR_PICTURE_STATE,1)
    $count := 0
    while ($count<=$tabBslices)
      set_key_color(68+$count,$KEY_COLOR_BLUE)
      inc($count)
    end while
    hide_part($tabB,$HIDE_PART_NOTHING)
  end if
end on

on ui_control($category_reverb)
  $count := 0
  while ($count<9)
    if ($count=$category_reverb)
      set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
    else
      set_control_par(%subcat_menu_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
    end if
    inc($count)
  end while
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[%offset_reverb[$category_reverb]+get_control_par(%subcat_menu_id[$category_reverb],$CONTROL_PAR_VALUE)],$reverb_slot,0)
end on

on ui_control($hall_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$hall_reverb],$reverb_slot,0)
end on

on ui_control($cathedral_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$cathedral_reverb],$reverb_slot,0)
end on

on ui_control($club_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$club_reverb],$reverb_slot,0)
end on

on ui_control($room_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$room_reverb],$reverb_slot,0)
end on

on ui_control($l300_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$l300_reverb],$reverb_slot,0)
end on

on ui_control($quadstick_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$quadstick_reverb],$reverb_slot,0)
end on

on ui_control($brt7_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$brt7_reverb],$reverb_slot,0)
end on

on ui_control($plate_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$plate_reverb],$reverb_slot,0)
end on

on ui_control($cabinet_reverb)
  _load_ir_sample(_get_folder($GET_FOLDER_FACTORY_DIR) & !ir_path[$cabinet_reverb],$reverb_slot,0)
end on























